Index: test/accordion.test.js
===================================================================
--- test/accordion.test.js
+++ test/accordion.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import {
   arrowDownKeyDown,
@@ -12,7 +13,7 @@
 import sinon from 'sinon';
 import '../vaadin-accordion.js';
 
-describe('vaadin-accordion', () => {
+describe('vaadin23-accordion', () => {
   let accordion, heading;
 
   function getHeading(idx) {
@@ -21,20 +22,20 @@
 
   beforeEach(async () => {
     accordion = fixtureSync(`
-      <vaadin-accordion>
-        <vaadin-accordion-panel>
+      <vaadin23-accordion>
+        <vaadin23-accordion-panel>
           <div slot="summary">Panel 1</div>
           <input />
-        </vaadin-accordion-panel>
-        <vaadin-accordion-panel>
+        </vaadin23-accordion-panel>
+        <vaadin23-accordion-panel>
           <div slot="summary">Panel 2</div>
           Content 2
-        </vaadin-accordion-panel>
-        <vaadin-accordion-panel>
+        </vaadin23-accordion-panel>
+        <vaadin23-accordion-panel>
           <div slot="summary">Panel 3</div>
           Content 3
-        </vaadin-accordion-panel>
-      </vaadin-accordion>
+        </vaadin23-accordion-panel>
+      </vaadin23-accordion>
     `);
     await nextFrame();
   });
@@ -47,11 +48,11 @@
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -68,7 +69,7 @@
     });
 
     it('should update items value when adding nodes', () => {
-      const panel = document.createElement('vaadin-accordion-panel');
+      const panel = document.createElement('vaadin23-accordion-panel');
       accordion.appendChild(panel);
       accordion._observer.flush();
       expect(accordion.items.length).to.be.equal(4);
@@ -157,7 +158,7 @@
     });
 
     it('should not throw when calling `focus()` before items are set', () => {
-      const focus = () => document.createElement('vaadin-accordion').focus();
+      const focus = () => document.createElement('vaadin23-accordion').focus();
       expect(focus()).to.not.throw;
     });
   });
