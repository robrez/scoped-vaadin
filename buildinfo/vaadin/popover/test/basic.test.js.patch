Index: test/basic.test.js
===================================================================
--- test/basic.test.js
+++ test/basic.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@vaadin/chai-plugins';
 import { esc, fixtureSync, nextRender, nextUpdate, outsideClick } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
@@ -8,9 +9,9 @@
   let popover, overlay;
 
   beforeEach(async () => {
-    popover = fixtureSync('<vaadin-popover></vaadin-popover>');
+    popover = fixtureSync('<vaadin24-popover></vaadin24-popover>');
     await nextRender();
-    overlay = popover.shadowRoot.querySelector('vaadin-popover-overlay');
+    overlay = popover.shadowRoot.querySelector('vaadin24-popover-overlay');
   });
 
   describe('custom element definition', () => {
@@ -21,11 +22,11 @@
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -68,7 +69,7 @@
     });
 
     it('should not throw when requesting content update before adding to DOM', () => {
-      const element = document.createElement('vaadin-popover');
+      const element = document.createElement('vaadin24-popover');
       expect(() => element.requestContentUpdate()).not.to.throw(Error);
     });
   });
@@ -299,7 +300,7 @@
       function nestedRenderer(root) {
         root.innerHTML = `
           <button id="second-target">Second target</button>
-          <vaadin-popover for="second-target"></vaadin-popover>
+          <vaadin24-popover for="second-target"></vaadin24-popover>
         `;
         [secondTarget, secondPopover] = root.children;
       }
