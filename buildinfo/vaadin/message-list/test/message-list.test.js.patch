Index: test/message-list.test.js
===================================================================
--- test/message-list.test.js
+++ test/message-list.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import {
   arrowDown,
@@ -22,7 +23,7 @@
     root.style.setProperty('--vaadin-user-color-1', 'purple');
     root.style.setProperty('--vaadin-user-color-2', 'blue');
 
-    messageList = fixtureSync('<vaadin-message-list></vaadin-message-list>');
+    messageList = fixtureSync('<vaadin24-message-list></vaadin24-message-list>');
     messages = [
       {
         text: 'A message in the stream of messages',
@@ -71,11 +72,11 @@
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -90,7 +91,7 @@
     });
 
     it('should render vaadin-message element for each item', () => {
-      const items = messageList.querySelectorAll('vaadin-message');
+      const items = messageList.querySelectorAll('vaadin24-message');
       expect(items.length).to.equal(4);
     });
 
@@ -101,7 +102,7 @@
     });
 
     it('message properties should be correctly set', () => {
-      const firstMessage = messageList.querySelector('vaadin-message');
+      const firstMessage = messageList.querySelector('vaadin24-message');
       expect(firstMessage.time).to.be.equal(messages[0].time);
       expect(firstMessage.userName).to.be.equal(messages[0].userName);
       expect(firstMessage.userAbbr).to.be.equal(messages[0].userAbbr);
@@ -115,14 +116,14 @@
       it('should remove vaadin-message elements for removed items', async () => {
         messageList.items = [messages[1], messages[2]];
         await nextRender();
-        const items = messageList.querySelectorAll('vaadin-message');
+        const items = messageList.querySelectorAll('vaadin24-message');
         expect(items.length).to.equal(2);
       });
 
       it('should append vaadin-message elements for items added at the end', async () => {
         messageList.items = [messages[1], messages[2], { userAbbr: 'SK', text: 'Hi' }];
         await nextRender();
-        const items = messageList.querySelectorAll('vaadin-message');
+        const items = messageList.querySelectorAll('vaadin24-message');
         expect(items.length).to.equal(3);
         expect(items[2].textContent).to.equal('Hi');
       });
@@ -130,16 +131,16 @@
       it('should insert vaadin-message elements for items added in the middle', async () => {
         messageList.items = [messages[1], { userAbbr: 'SK', text: 'Hi' }, messages[2]];
         await nextRender();
-        const items = messageList.querySelectorAll('vaadin-message');
+        const items = messageList.querySelectorAll('vaadin24-message');
         expect(items.length).to.equal(3);
         expect(items[1].textContent).to.equal('Hi');
       });
 
       it('should reuse existing vaadin-message element when updating items', async () => {
-        const firstMessage = messageList.querySelector('vaadin-message');
+        const firstMessage = messageList.querySelector('vaadin24-message');
         messageList.items = [messages[1], messages[2]];
         await nextRender();
-        const items = messageList.querySelectorAll('vaadin-message');
+        const items = messageList.querySelectorAll('vaadin24-message');
         expect(items.length).to.equal(2);
         expect(items[0]).to.eql(firstMessage);
         expect(items[1]).to.not.eql(firstMessage);
@@ -148,7 +149,7 @@
       it('should not remove vaadin-avatar elements when updating items', async () => {
         messageList.items = [{ text: '', userName: 'Assistant' }];
         await nextRender();
-        expect(messageList.querySelector('vaadin-avatar')).to.be.ok;
+        expect(messageList.querySelector('vaadin24-avatar')).to.be.ok;
       });
     });
 
@@ -201,7 +202,7 @@
 
     describe('tabindex', () => {
       it('should set tabindex 0 on first message after removing the one that had it previously', async () => {
-        const messages = messageList.querySelectorAll('vaadin-message');
+        const messages = messageList.querySelectorAll('vaadin24-message');
         const thirdMessage = messages[2];
 
         // Click on third item to give it tabindex=0
@@ -237,7 +238,7 @@
       });
 
       it('should preserve tabindex when adding new messages', async () => {
-        const secondMessage = messageList.querySelectorAll('vaadin-message')[1];
+        const secondMessage = messageList.querySelectorAll('vaadin24-message')[1];
         mousedown(secondMessage);
         focusin(secondMessage);
         messageList.items = [
@@ -253,14 +254,14 @@
           },
         ];
         await nextRender(messageList);
-        const messages = messageList.querySelectorAll('vaadin-message');
+        const messages = messageList.querySelectorAll('vaadin24-message');
         messages.forEach((msg, idx) => {
           expect(msg.tabIndex).to.equal(idx === 1 ? 0 : -1);
         });
       });
 
       it('should preserve tabindex when removing messages if possible', async () => {
-        const secondMessage = messageList.querySelectorAll('vaadin-message')[1];
+        const secondMessage = messageList.querySelectorAll('vaadin24-message')[1];
         mousedown(secondMessage);
         focusin(secondMessage);
 
@@ -287,7 +288,7 @@
         ];
 
         await nextRender(messageList);
-        const messages = messageList.querySelectorAll('vaadin-message');
+        const messages = messageList.querySelectorAll('vaadin24-message');
         // Verify that the second item got the new tabIndex=0.
         expect(messages[0].tabIndex).to.be.equal(-1);
         expect(messages[1].tabIndex).to.be.equal(0);
@@ -301,7 +302,7 @@
     beforeEach(async () => {
       messageList.items = messages;
       await nextRender(messageList);
-      messageElements = messageList.querySelectorAll('vaadin-message');
+      messageElements = messageList.querySelectorAll('vaadin24-message');
       message = messageElements[1];
     });
 
@@ -349,7 +350,7 @@
     beforeEach(async () => {
       messageList.items = messages;
       await nextRender(messageList);
-      messageElements = messageList.querySelectorAll('vaadin-message');
+      messageElements = messageList.querySelectorAll('vaadin24-message');
     });
 
     it('should set tabindex on the next message on "arrow-down" keydown', () => {
