Index: test/menu-bar.common.js
===================================================================
--- test/menu-bar.common.js
+++ test/menu-bar.common.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import {
   arrowLeft,
@@ -15,16 +16,16 @@
   let menu, tagName;
 
   beforeEach(() => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin24-menu-bar></vaadin24-menu-bar>');
     tagName = menu.tagName.toLowerCase();
   });
 
   it('should be defined in custom element registry', () => {
-    expect(customElements.get(tagName)).to.be.ok;
+    expect(internalCustomElements.get(tagName)).to.be.ok;
   });
 
   it('should have a valid static "is" getter', () => {
-    expect(customElements.get(tagName).is).to.equal(tagName);
+    expect(internalCustomElements.get(tagName).is).to.equal(tagName);
   });
 });
 
@@ -38,7 +39,7 @@
   }
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin24-menu-bar></vaadin24-menu-bar>');
     menu.items = [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3', disabled: true }, { text: 'Item 4' }];
     await nextRender(menu);
     buttons = menu._buttons;
@@ -91,7 +92,7 @@
 
   it('should not throw when changing items before the menu bar is attached', () => {
     expect(() => {
-      const menuBar = document.createElement('vaadin-menu-bar');
+      const menuBar = document.createElement('vaadin24-menu-bar');
       menuBar.items = [{ text: 'Item 1' }];
     }).to.not.throw(Error);
   });
@@ -306,13 +307,13 @@
   }
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin24-menu-bar></vaadin24-menu-bar>');
     menu.items = [
       { text: 'Item 1' },
       { text: 'Item 2' },
       { component: makeComponent('3') },
       { text: 'Item 4 text', component: makeComponent('4') },
-      { text: 'Item 5', component: document.createElement('vaadin-menu-bar-item') },
+      { text: 'Item 5', component: document.createElement('vaadin24-menu-bar-item') },
       { component: makeComponent('6'), children: [{ text: 'SubItem6.1' }, { text: 'SubItem6.2' }] },
     ];
     await nextRender(menu);
@@ -323,7 +324,7 @@
   it('should render the component inside the menu-bar item', () => {
     const item = buttons[2].firstChild;
     expect(item).to.equal(buttons[2].item.component);
-    expect(item.localName).to.equal('vaadin-menu-bar-item');
+    expect(item.localName).to.equal('vaadin24-menu-bar-item');
     const div = item.firstChild;
     expect(div).to.equal(menu.items[2].component);
     expect(div.localName).to.equal('div');
@@ -334,7 +335,7 @@
   it('should override the component text when defined on the item', () => {
     const item = buttons[3].firstChild;
     expect(item).to.equal(buttons[3].item.component);
-    expect(item.localName).to.equal('vaadin-menu-bar-item');
+    expect(item.localName).to.equal('vaadin24-menu-bar-item');
     const div = item.firstChild;
     expect(div).to.equal(menu.items[3].component);
     expect(div.localName).to.equal('div');
@@ -364,7 +365,7 @@
   beforeEach(async () => {
     wrapper = fixtureSync(`
       <div style="display: flex; width: 400px;">
-        <vaadin-menu-bar></vaadin-menu-bar>
+        <vaadin24-menu-bar></vaadin24-menu-bar>
       </div>
     `);
     menu = wrapper.firstElementChild;
