Index: test/sub-menu.test.js
===================================================================
--- test/sub-menu.test.js
+++ test/sub-menu.test.js
@@ -18,7 +18,7 @@
 import './not-animated-styles.js';
 import '../vaadin-menu-bar.js';
 import { setCancelSyntheticClickEvents } from '@polymer/polymer/lib/utils/settings.js';
-import { isTouch } from '@vaadin/component-base/src/browser-utils.js';
+import { isTouch } from '@scoped-vaadin/component-base/src/browser-utils.js';
 
 setCancelSyntheticClickEvents(false);
 
@@ -28,13 +28,13 @@
   let menu, buttons, subMenu, item;
 
   const createComponent = (text) => {
-    const item = document.createElement('vaadin-context-menu-item');
+    const item = document.createElement('vaadin23-context-menu-item');
     item.textContent = text;
     return item;
   };
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [
       {
         text: 'Menu Item 1',
@@ -93,7 +93,7 @@
     buttons[0].click();
     await nextRender(subMenu);
     expect(spy.calledOnce).to.be.true;
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     expect(item.hasAttribute('focused')).to.be.false;
   });
 
@@ -101,7 +101,7 @@
     buttons[0].click();
     await nextRender(subMenu);
     const overlay = subMenu.$.overlay.$.overlay;
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     const spy = sinon.spy(item, 'focus');
     arrowDown(overlay);
     expect(spy.calledOnce).to.be.true;
@@ -111,7 +111,7 @@
     buttons[0].click();
     await nextRender(subMenu);
     const overlay = subMenu.$.overlay.$.overlay;
-    const items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     const last = items[items.length - 1];
     const spy = sinon.spy(last, 'focus');
     arrowUp(overlay);
@@ -131,7 +131,7 @@
     arrowDown(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     const spy = sinon.spy(item, 'focus');
     await nextRender(subMenu);
     expect(spy.calledOnce).to.be.true;
@@ -141,7 +141,7 @@
     arrowUp(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
-    const items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     const last = items[items.length - 1];
     const spy = sinon.spy(last, 'focus');
     await nextRender(subMenu);
@@ -152,7 +152,7 @@
     arrowDown(buttons[2]);
     await nextRender(subMenu);
 
-    const items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     arrowDown(items[0]);
     expect(items[1].hasAttribute('focus-ring')).to.be.true;
 
@@ -167,7 +167,7 @@
   it('should close sub-menu on first item arrow up', async () => {
     arrowDown(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
-    item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     expect(item).to.be.ok;
     await nextRender(subMenu);
     arrowUp(item);
@@ -180,7 +180,7 @@
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
     await nextRender(subMenu);
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     arrowLeft(item);
     await nextRender(subMenu);
     expect(subMenu.opened).to.be.true;
@@ -192,7 +192,7 @@
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
     await nextRender(subMenu);
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     arrowLeft(item);
     await nextRender(subMenu);
     expect(subMenu.opened).to.be.false;
@@ -205,7 +205,7 @@
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
     await nextRender(subMenu);
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     arrowRight(item);
     await nextRender(subMenu);
     expect(subMenu.opened).to.be.true;
@@ -217,7 +217,7 @@
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
     await nextRender(subMenu);
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     arrowRight(item);
     await nextRender(subMenu);
     expect(subMenu.opened).to.be.false;
@@ -229,11 +229,11 @@
     arrowDown(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
-    let item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    let item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     await nextRender(subMenu);
     arrowLeft(item);
     await nextRender(subMenu);
-    item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     const spy = sinon.spy(item, 'focus');
     arrowDown(buttons[2]);
     expect(spy.calledOnce).to.be.true;
@@ -243,11 +243,11 @@
     arrowDown(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     await nextRender(subMenu);
     arrowLeft(item);
     await nextRender(subMenu);
-    const items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     const last = items[items.length - 1];
     const spy = sinon.spy(last, 'focus');
     arrowUp(buttons[2]);
@@ -264,7 +264,7 @@
     await nextRender(menu);
     arrowDown(buttons[0]);
     await nextRender(subMenu);
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     arrowLeft(item);
     await nextRender(subMenu);
     arrowLeft(buttons[2]);
@@ -279,7 +279,7 @@
     await oneEvent(subMenu, 'opened-changed');
     expect(subMenu.opened).to.be.true;
     await nextRender(subMenu);
-    const item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    const item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     arrowLeft(item);
     await nextRender(subMenu);
     esc(buttons[2]);
@@ -303,7 +303,7 @@
 
     const spy = sinon.spy();
     menu.addEventListener('item-selected', spy);
-    item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     item.click();
     await nextRender(subMenu);
     expect(subMenu.opened).to.be.false;
@@ -314,7 +314,7 @@
   it('should not close submenu on item contextmenu event', async () => {
     buttons[0].click();
     await nextRender(subMenu);
-    item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+    item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
     item.dispatchEvent(new CustomEvent('contextmenu', { bubbles: true, composed: true }));
     await nextRender(subMenu);
     expect(subMenu.opened).to.be.true;
@@ -323,7 +323,7 @@
   it('should not close on parent item click', async () => {
     arrowUp(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
-    const items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     const last = items[items.length - 1];
     await nextRender(subMenu);
     last.click();
@@ -418,7 +418,7 @@
       await nextRender(subMenu);
       expect(buttons[0].hasAttribute('expanded')).to.be.true;
 
-      item = subMenu.$.overlay.querySelector('vaadin-context-menu-item');
+      item = subMenu.$.overlay.querySelector('vaadin23-context-menu-item');
       arrowUp(item);
       await nextRender(subMenu);
       expect(buttons[0].hasAttribute('expanded')).to.be.false;
@@ -453,7 +453,7 @@
   const openOnHoverEvent = 'mouseover';
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [
       {
         text: 'Menu Item 1',
@@ -532,7 +532,7 @@
   let menu, buttons, subMenu, overflow;
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [
       {
         text: 'Menu Item 1',
@@ -588,7 +588,7 @@
   let menu, subMenu, buttons;
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar theme="foo"></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar theme="foo"></vaadin23-menu-bar>');
     menu.items = [
       {
         text: 'Menu Item 1',
@@ -622,7 +622,7 @@
   });
 
   it('should override the component theme attribute with the item.theme property', async () => {
-    let items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    let items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
 
     expect(items[0].getAttribute('theme')).to.equal('sub-item-theme');
     expect(items[1].getAttribute('theme')).to.equal('foo');
@@ -632,7 +632,7 @@
     buttons[0].dispatchEvent(new CustomEvent(menuOpenEvent, { bubbles: true, composed: true }));
     await nextRender(subMenu);
 
-    items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
 
     expect(items[0].getAttribute('theme')).to.equal('sub-item-theme');
     expect(items[1].hasAttribute('theme')).to.be.false;
@@ -653,7 +653,7 @@
   };
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [
       {
         text: 'Menu Item 1',
@@ -683,12 +683,12 @@
     arrowDown(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
     await nextRender(subMenu);
-    const subMenu2 = subMenu.$.overlay.querySelector('vaadin-menu-bar-submenu');
-    items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const subMenu2 = subMenu.$.overlay.querySelector('vaadin23-menu-bar-submenu');
+    items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     item = items[items.length - 1];
     open(item);
     await nextRender(subMenu2);
-    items = subMenu2.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    items = subMenu2.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     item = items[items.length - 1];
     touchstart(item);
     touchend(item);
@@ -701,13 +701,13 @@
     arrowDown(buttons[0]);
     await oneEvent(subMenu, 'opened-changed');
     await nextRender(subMenu);
-    const subMenu2 = subMenu.$.overlay.querySelector('vaadin-menu-bar-submenu');
-    items = subMenu.$.overlay.querySelectorAll('vaadin-context-menu-item');
+    const subMenu2 = subMenu.$.overlay.querySelector('vaadin23-menu-bar-submenu');
+    items = subMenu.$.overlay.querySelectorAll('vaadin23-context-menu-item');
     item = items[items.length - 1];
     open(item);
     await nextRender(subMenu2);
-    const subMenu3 = subMenu2.$.overlay.querySelector('vaadin-menu-bar-submenu');
-    item = subMenu2.$.overlay.querySelector('vaadin-context-menu-item');
+    const subMenu3 = subMenu2.$.overlay.querySelector('vaadin23-menu-bar-submenu');
+    item = subMenu2.$.overlay.querySelector('vaadin23-context-menu-item');
     expect(item).to.be.ok;
     open(item);
     await nextRender(subMenu3);
