Index: test/menu-bar.test.js
===================================================================
--- test/menu-bar.test.js
+++ test/menu-bar.test.js
@@ -1,12 +1,13 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { arrowLeft, arrowRight, end, fixtureSync, focusin, home, nextFrame, nextRender } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
 import './not-animated-styles.js';
 import '../vaadin-menu-bar.js';
-import { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
+import { css, registerStyles } from '@scoped-vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
 
 registerStyles(
-  'vaadin-menu-bar',
+  'vaadin23-menu-bar',
   css`
     :host([theme='big']) [part$='button'] {
       width: 100px;
@@ -53,16 +54,16 @@
   let menu, tagName;
 
   beforeEach(() => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     tagName = menu.tagName.toLowerCase();
   });
 
   it('should be defined in custom element registry', () => {
-    expect(customElements.get(tagName)).to.be.ok;
+    expect(internalCustomElements.get(tagName)).to.be.ok;
   });
 
   it('should have a valid static "is" getter', () => {
-    expect(customElements.get(tagName).is).to.equal(tagName);
+    expect(internalCustomElements.get(tagName).is).to.equal(tagName);
   });
 });
 
@@ -75,7 +76,7 @@
   }
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3', disabled: true }, { text: 'Item 4' }];
     await nextRender(menu);
     buttons = menu._buttons;
@@ -126,7 +127,7 @@
 
   it('should not throw when changing items before the menu bar is attached', () => {
     expect(() => {
-      const menuBar = document.createElement('vaadin-menu-bar');
+      const menuBar = document.createElement('vaadin23-menu-bar');
       menuBar.items = [{ text: 'Item 1' }];
     }).to.not.throw(Error);
   });
@@ -327,7 +328,7 @@
   let menu, buttons, overflow;
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
 
     menu.style.width = '250px';
 
@@ -504,7 +505,7 @@
   let menu, buttons, overflow;
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3' }, { text: 'Item 4' }];
     await nextRender(menu);
     buttons = menu._buttons;
@@ -572,7 +573,7 @@
 
   beforeEach(async () => {
     container = fixtureSync(
-      '<div style="display: flex;"><vaadin-menu-bar style="min-width: 100%"></vaadin-menu-bar></div>',
+      '<div style="display: flex;"><vaadin23-menu-bar style="min-width: 100%"></vaadin23-menu-bar></div>',
     );
     menu = container.firstChild;
 
@@ -631,7 +632,7 @@
     container = fixtureSync('<div style="display: flex; max-width: 300px"></div>');
     text = document.createElement('div');
     text.textContent = 'Sibling';
-    menu = document.createElement('vaadin-menu-bar');
+    menu = document.createElement('vaadin23-menu-bar');
     menu.items = [{ text: 'Item 1' }, { text: 'Item 2' }, { text: 'Item 3' }, { text: 'Item 4' }];
     menu.style.minWidth = '100px';
   });
@@ -701,13 +702,13 @@
   }
 
   beforeEach(async () => {
-    menu = fixtureSync('<vaadin-menu-bar></vaadin-menu-bar>');
+    menu = fixtureSync('<vaadin23-menu-bar></vaadin23-menu-bar>');
     menu.items = [
       { text: 'Item 1' },
       { text: 'Item 2' },
       { component: makeComponent('3') },
       { text: 'Item 4 text', component: makeComponent('4') },
-      { text: 'Item 5', component: document.createElement('vaadin-context-menu-item') },
+      { text: 'Item 5', component: document.createElement('vaadin23-context-menu-item') },
       { component: makeComponent('6'), children: [{ text: 'SubItem6.1' }, { text: 'SubItem6.2' }] },
     ];
     await nextRender(menu);
@@ -718,7 +719,7 @@
   it('should render the component inside the context-menu item', () => {
     const item = buttons[2].firstChild;
     expect(item).to.equal(buttons[2].item.component);
-    expect(item.localName).to.equal('vaadin-context-menu-item');
+    expect(item.localName).to.equal('vaadin23-context-menu-item');
     const div = item.firstChild;
     expect(div).to.equal(menu.items[2].component);
     expect(div.localName).to.equal('div');
@@ -729,7 +730,7 @@
   it('should override the component text when defined on the item', () => {
     const item = buttons[3].firstChild;
     expect(item).to.equal(buttons[3].item.component);
-    expect(item.localName).to.equal('vaadin-context-menu-item');
+    expect(item.localName).to.equal('vaadin23-context-menu-item');
     const div = item.firstChild;
     expect(div).to.equal(menu.items[3].component);
     expect(div.localName).to.equal('div');
@@ -774,7 +775,7 @@
     it('should teleport the same component to overflow sub-menu and back', async () => {
       overflow.click();
       await nextRender(subMenu);
-      const listBox = subMenu.$.overlay.querySelector('vaadin-context-menu-list-box');
+      const listBox = subMenu.$.overlay.querySelector('vaadin23-context-menu-list-box');
       expect(listBox.items[0]).to.equal(buttons[2].item.component);
       expect(listBox.items[0].firstChild).to.equal(menu.items[2].component);
       expect(listBox.items[0].firstChild.localName).to.equal('div');
@@ -818,7 +819,7 @@
   beforeEach(() => {
     wrapper = fixtureSync(`
       <div style="display: flex; width: 400px;">
-        <vaadin-menu-bar></vaadin-menu-bar>
+        <vaadin23-menu-bar></vaadin23-menu-bar>
       </div>
     `);
     menu = wrapper.firstElementChild;
