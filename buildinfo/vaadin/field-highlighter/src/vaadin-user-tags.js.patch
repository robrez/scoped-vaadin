Index: src/vaadin-user-tags.js
===================================================================
--- src/vaadin-user-tags.js
+++ src/vaadin-user-tags.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 /**
  * @license
  * Copyright (c) 2021 - 2022 Vaadin Ltd.
@@ -7,8 +8,8 @@
 import './vaadin-user-tags-overlay.js';
 import { calculateSplices } from '@polymer/polymer/lib/utils/array-splice.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
-import { timeOut } from '@vaadin/component-base/src/async.js';
-import { Debouncer } from '@vaadin/component-base/src/debounce.js';
+import { timeOut } from '@scoped-vaadin/component-base/src/async.js';
+import { Debouncer } from '@scoped-vaadin/component-base/src/debounce.js';
 
 const listenOnce = (elem, type) => {
   return new Promise((resolve) => {
@@ -21,14 +22,14 @@
 };
 
 /**
- * An element used internally by `<vaadin-field-highlighter>`. Not intended to be used separately.
+ * An element used internally by `<vaadin23-field-highlighter>`. Not intended to be used separately.
  *
  * @extends HTMLElement
  * @private
  */
 export class UserTags extends PolymerElement {
   static get is() {
-    return 'vaadin-user-tags';
+    return 'vaadin23-user-tags';
   }
 
   static get template() {
@@ -38,13 +39,13 @@
           position: absolute;
         }
       </style>
-      <vaadin-user-tags-overlay
+      <vaadin23-user-tags-overlay
         id="overlay"
         modeless
         opened="[[opened]]"
         no-vertical-overlap
         on-vaadin-overlay-open="_onOverlayOpen"
-      ></vaadin-user-tags-overlay>
+      ></vaadin23-user-tags-overlay>
     `;
   }
 
@@ -213,7 +214,7 @@
   }
 
   createUserTag(user) {
-    const tag = document.createElement('vaadin-user-tag');
+    const tag = document.createElement('vaadin23-user-tag');
     tag.name = user.name;
     tag.uid = user.id;
     tag.colorIndex = user.colorIndex;
@@ -447,4 +448,4 @@
   }
 }
 
-customElements.define(UserTags.is, UserTags);
+internalCustomElements.define(UserTags.is, UserTags);
