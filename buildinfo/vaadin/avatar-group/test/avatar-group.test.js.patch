Index: test/avatar-group.test.js
===================================================================
--- test/avatar-group.test.js
+++ test/avatar-group.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import {
   enterKeyDown,
@@ -36,7 +37,7 @@
   let group;
 
   beforeEach(() => {
-    group = fixtureSync('<vaadin-avatar-group></vaadin-avatar-group>');
+    group = fixtureSync('<vaadin24-avatar-group></vaadin24-avatar-group>');
   });
 
   describe('custom element definition', () => {
@@ -47,11 +48,11 @@
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -62,13 +63,13 @@
     });
 
     it('should render avatar for each item, plus overflow avatar', () => {
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(items.length).to.equal(group.items.length + 1);
     });
 
     it('should propagate theme attribute to all avatars', () => {
       group.setAttribute('theme', 'small');
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       items.forEach((avatar) => expect(avatar.getAttribute('theme')).to.equal('small'));
     });
   });
@@ -81,7 +82,7 @@
     });
 
     it('should render avatar based on maxItemsVisible, including overflow avatar', () => {
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(items.length).to.equal(group.maxItemsVisible);
     });
 
@@ -93,8 +94,8 @@
     it('should set generator on the overflow avatar tooltip', () => {
       const overflow = group.$.overflow;
       const items = group.items;
-      const tooltip = overflow.querySelector('vaadin-tooltip');
-      const overlay = tooltip.shadowRoot.querySelector('vaadin-tooltip-overlay');
+      const tooltip = overflow.querySelector('vaadin24-tooltip');
+      const overlay = tooltip.shadowRoot.querySelector('vaadin24-tooltip-overlay');
       expect(overlay.textContent).to.equal([items[2].name, items[3].abbr, 'anonymous'].join('\n'));
     });
 
@@ -106,7 +107,7 @@
     it('should show at least two avatars if maxItemsVisible is below 2', async () => {
       group.maxItemsVisible = 1;
       await nextRender(group);
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(items.length).to.equal(2);
     });
 
@@ -121,7 +122,7 @@
       group.items = group.items.slice(0, 2);
       group.maxItemsVisible = 1;
       await nextRender(group);
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar:not([hidden])');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar:not([hidden])');
       expect(items.length).to.equal(2);
     });
 
@@ -154,7 +155,7 @@
       group.items = [];
       group.items = items;
       await nextRender(group);
-      const renderedElements = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const renderedElements = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(renderedElements.length).to.equal(maxItemsVisible);
     });
 
@@ -168,7 +169,7 @@
         group.style.width = '100px';
         await onceResized(group);
 
-        const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+        const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
         expect(items.length).to.equal(3);
       });
 
@@ -195,7 +196,7 @@
     it('should render avatars to fit width on resize', async () => {
       group.style.width = '110px';
       await onceResized(group);
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(items.length).to.equal(3);
       expect(overflow.abbr).to.equal('+3');
     });
@@ -204,7 +205,7 @@
       group.set('items', group.items.slice(0, 2));
       group.style.width = '50px';
       await onceResized(group);
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar:not([hidden])');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar:not([hidden])');
       expect(items.length).to.equal(2);
     });
 
@@ -321,7 +322,7 @@
 
     it('should set tabindex="-1" on the avatars in the items', (done) => {
       overlay.addEventListener('vaadin-overlay-open', () => {
-        const avatars = overlay.content.querySelectorAll('vaadin-avatar');
+        const avatars = overlay.content.querySelectorAll('vaadin24-avatar');
         expect(avatars[0].getAttribute('tabindex')).to.equal('-1');
         expect(avatars[1].getAttribute('tabindex')).to.equal('-1');
         expect(avatars[2].getAttribute('tabindex')).to.equal('-1');
@@ -439,7 +440,7 @@
     });
 
     it('should pass color index to avatars', () => {
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(items[0].colorIndex).to.equal(0);
       expect(items[1].colorIndex).to.equal(1);
       expect(items[2].colorIndex).to.equal(2);
@@ -448,7 +449,7 @@
     it('should pass color index to overlay avatars', (done) => {
       group.maxItemsVisible = 1;
       overlay.addEventListener('vaadin-overlay-open', () => {
-        const avatars = overlay.content.querySelectorAll('vaadin-avatar');
+        const avatars = overlay.content.querySelectorAll('vaadin24-avatar');
         expect(avatars[0].colorIndex).to.equal(group.items[1].colorIndex);
         expect(avatars[1].colorIndex).to.equal(group.items[2].colorIndex);
         done();
@@ -500,7 +501,7 @@
 
     it('should pass i18n property to avatars', () => {
       group.i18n = customI18n;
-      const items = group.shadowRoot.querySelectorAll('vaadin-avatar');
+      const items = group.shadowRoot.querySelectorAll('vaadin24-avatar');
       expect(items[0].i18n).to.deep.equal(customI18n);
       expect(items[1].i18n).to.deep.equal(customI18n);
       expect(items[2].i18n).to.deep.equal(customI18n);
@@ -510,7 +511,7 @@
       group.i18n = customI18n;
       group.maxItemsVisible = 1;
       overlay.addEventListener('vaadin-overlay-open', () => {
-        const avatars = overlay.content.querySelectorAll('vaadin-avatar');
+        const avatars = overlay.content.querySelectorAll('vaadin24-avatar');
         expect(avatars[0].i18n).to.deep.equal(customI18n);
         expect(avatars[1].i18n).to.deep.equal(customI18n);
         done();
@@ -569,10 +570,10 @@
 
     it('should not create tooltips for the overlay avatars', (done) => {
       overlay.addEventListener('vaadin-overlay-open', () => {
-        const avatars = overlay.content.querySelectorAll('vaadin-avatar');
+        const avatars = overlay.content.querySelectorAll('vaadin24-avatar');
         avatars.forEach((avatar) => {
           expect(avatar.withTooltip).to.be.false;
-          expect(avatar.querySelector('vaadin-tooltip')).to.be.not.ok;
+          expect(avatar.querySelector('vaadin24-tooltip')).to.be.not.ok;
         });
         done();
       });
@@ -581,7 +582,7 @@
 
     it('should set aria-hidden="true" on the overlay avatars', (done) => {
       overlay.addEventListener('vaadin-overlay-open', () => {
-        const avatars = overlay.content.querySelectorAll('vaadin-avatar');
+        const avatars = overlay.content.querySelectorAll('vaadin24-avatar');
         avatars.forEach((avatar) => {
           expect(avatar.getAttribute('aria-hidden')).to.equal('true');
         });
@@ -674,7 +675,7 @@
   beforeEach(async () => {
     layout = fixtureSync(`
       <div style="display: flex; width: 200px; flex-direction: column; align-items: flex-start;">
-        <vaadin-avatar-group></vaadin-avatar-group>
+        <vaadin24-avatar-group></vaadin24-avatar-group>
       </div>
     `);
     group = layout.firstElementChild;
