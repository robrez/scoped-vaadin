Index: web-types.json
===================================================================
--- web-types.json
+++ web-types.json
@@ -1,14 +1,14 @@
 {
   "$schema": "https://json.schemastore.org/web-types",
-  "name": "@vaadin/grid",
+  "name": "@scoped-vaadin/grid",
   "version": "23.4.1",
   "description-markup": "markdown",
   "contributions": {
     "html": {
       "elements": [
         {
-          "name": "vaadin-grid-column",
-          "description": "A `<vaadin-grid-column>` is used to configure how a column in `<vaadin-grid>`\nshould look like.\n\nSee [`<vaadin-grid>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid) documentation for instructions on how\nto configure the `<vaadin-grid-column>`.",
+          "name": "vaadin23-grid-column",
+          "description": "A `<vaadin23-grid-column>` is used to configure how a column in `<vaadin23-grid>`\nshould look like.\n\nSee [`<vaadin23-grid>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid) documentation for instructions on how\nto configure the `<vaadin23-grid-column>`.",
           "attributes": [
             {
               "name": "resizable",
@@ -190,7 +190,7 @@
               },
               {
                 "name": "headerRenderer",
-                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -201,7 +201,7 @@
               },
               {
                 "name": "footerRenderer",
-                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -232,7 +232,7 @@
               },
               {
                 "name": "renderer",
-                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
+                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                 "value": {
                   "type": [
                     "GridBodyRenderer",
@@ -266,8 +266,8 @@
           }
         },
         {
-          "name": "vaadin-grid-column-group",
-          "description": "A `<vaadin-grid-column-group>` is used to make groups of columns in `<vaadin-grid>` and\nto configure additional headers and footers.\n\nGroups can be nested to create complex header and footer configurations.\n\n#### Example:\n```html\n<vaadin-grid-column-group resizable id=\"columnGroup\">\n  <vaadin-grid-column id=\"column1\"></vaadin-grid-column>\n  <vaadin-grid-column id=\"column2\"></vaadin-grid-column>\n</vaadin-grid-column-group>\n```\n```js\nconst columnGroup = document.querySelector('#columnGroup');\ncolumnGroup.headerRenderer = (root, columnGroup) => {\n  root.textContent = 'header';\n}\n\nconst column1 = document.querySelector('#column1');\ncolumn1.headerRenderer = (root, column) => { ... };\ncolumn1.renderer = (root, column, model) => { ... };\n\nconst column2 = document.querySelector('#column2');\ncolumn2.headerRenderer = (root, column) => { ... };\ncolumn2.renderer = (root, column, model) => { ... };\n```",
+          "name": "vaadin23-grid-column-group",
+          "description": "A `<vaadin23-grid-column-group>` is used to make groups of columns in `<vaadin23-grid>` and\nto configure additional headers and footers.\n\nGroups can be nested to create complex header and footer configurations.\n\n#### Example:\n```html\n<vaadin23-grid-column-group resizable id=\"columnGroup\">\n  <vaadin23-grid-column id=\"column1\"></vaadin23-grid-column>\n  <vaadin23-grid-column id=\"column2\"></vaadin23-grid-column>\n</vaadin23-grid-column-group>\n```\n```js\nconst columnGroup = document.querySelector('#columnGroup');\ncolumnGroup.headerRenderer = (root, columnGroup) => {\n  root.textContent = 'header';\n}\n\nconst column1 = document.querySelector('#column1');\ncolumn1.headerRenderer = (root, column) => { ... };\ncolumn1.renderer = (root, column, model) => { ... };\n\nconst column2 = document.querySelector('#column2');\ncolumn2.headerRenderer = (root, column) => { ... };\ncolumn2.renderer = (root, column, model) => { ... };\n```",
           "attributes": [
             {
               "name": "resizable",
@@ -409,7 +409,7 @@
               },
               {
                 "name": "headerRenderer",
-                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -420,7 +420,7 @@
               },
               {
                 "name": "footerRenderer",
-                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -434,8 +434,8 @@
           }
         },
         {
-          "name": "vaadin-grid-filter",
-          "description": "`<vaadin-grid-filter>` is a helper element for the `<vaadin-grid>` that provides out-of-the-box UI controls,\nand handlers for filtering the grid data.\n\n#### Example:\n```html\n<vaadin-grid-column id=\"column\"></vaadin-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.headerRenderer = (root, column) => {\n  let filter = root.firstElementChild;\n  if (!filter) {\n    filter = document.createElement('vaadin-grid-filter');\n    root.appendChild(filter);\n  }\n  filter.path = 'name.first';\n};\ncolumn.renderer = (root, column, model) => {\n  root.textContent = model.item.name.first;\n};\n```",
+          "name": "vaadin23-grid-filter",
+          "description": "`<vaadin23-grid-filter>` is a helper element for the `<vaadin23-grid>` that provides out-of-the-box UI controls,\nand handlers for filtering the grid data.\n\n#### Example:\n```html\n<vaadin23-grid-column id=\"column\"></vaadin23-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.headerRenderer = (root, column) => {\n  let filter = root.firstElementChild;\n  if (!filter) {\n    filter = document.createElement('vaadin23-grid-filter');\n    root.appendChild(filter);\n  }\n  filter.path = 'name.first';\n};\ncolumn.renderer = (root, column, model) => {\n  root.textContent = model.item.name.first;\n};\n```",
           "attributes": [
             {
               "name": "path",
@@ -505,8 +505,8 @@
           }
         },
         {
-          "name": "vaadin-grid-filter-column",
-          "description": "`<vaadin-grid-filter-column>` is a helper element for the `<vaadin-grid>`\nthat provides default header renderer and functionality for filtering.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-filter-column path=\"name.first\"></vaadin-grid-filter-column>\n\n <vaadin-grid-column>\n   ...\n```",
+          "name": "vaadin23-grid-filter-column",
+          "description": "`<vaadin23-grid-filter-column>` is a helper element for the `<vaadin23-grid>`\nthat provides default header renderer and functionality for filtering.\n\n#### Example:\n```html\n<vaadin23-grid items=\"[[items]]\">\n <vaadin23-grid-filter-column path=\"name.first\"></vaadin23-grid-filter-column>\n\n <vaadin23-grid-column>\n   ...\n```",
           "attributes": [
             {
               "name": "resizable",
@@ -688,7 +688,7 @@
               },
               {
                 "name": "headerRenderer",
-                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -699,7 +699,7 @@
               },
               {
                 "name": "footerRenderer",
-                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -730,7 +730,7 @@
               },
               {
                 "name": "renderer",
-                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
+                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                 "value": {
                   "type": [
                     "GridBodyRenderer",
@@ -764,8 +764,8 @@
           }
         },
         {
-          "name": "vaadin-grid-selection-column",
-          "description": "`<vaadin-grid-selection-column>` is a helper element for the `<vaadin-grid>`\nthat provides default renderers and functionality for item selection.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-selection-column frozen auto-select></vaadin-grid-selection-column>\n\n <vaadin-grid-column>\n   ...\n```\n\nBy default the selection column displays `<vaadin-checkbox>` elements in the\ncolumn cells. The checkboxes in the body rows toggle selection of the corresponding row items.\n\nWhen the grid data is provided as an array of [`items`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-items),\nthe column header gets an additional checkbox that can be used for toggling\nselection for all the items at once.\n\n__The default content can also be overridden__",
+          "name": "vaadin23-grid-selection-column",
+          "description": "`<vaadin23-grid-selection-column>` is a helper element for the `<vaadin23-grid>`\nthat provides default renderers and functionality for item selection.\n\n#### Example:\n```html\n<vaadin23-grid items=\"[[items]]\">\n <vaadin23-grid-selection-column frozen auto-select></vaadin23-grid-selection-column>\n\n <vaadin23-grid-column>\n   ...\n```\n\nBy default the selection column displays `<vaadin23-checkbox>` elements in the\ncolumn cells. The checkboxes in the body rows toggle selection of the corresponding row items.\n\nWhen the grid data is provided as an array of [`items`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-items),\nthe column header gets an additional checkbox that can be used for toggling\nselection for all the items at once.\n\n__The default content can also be overridden__",
           "attributes": [
             {
               "name": "width",
@@ -885,8 +885,8 @@
           }
         },
         {
-          "name": "vaadin-grid-sorter",
-          "description": "`<vaadin-grid-sorter>` is a helper element for the `<vaadin-grid>` that provides out-of-the-box UI controls,\nvisual feedback, and handlers for sorting the grid data.\n\n#### Example:\n```html\n<vaadin-grid-column id=\"column\"></vaadin-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.renderer = (root, column, model) => {\n  let sorter = root.firstElementChild;\n  if (!sorter) {\n    sorter = document.createElement('vaadin-grid-sorter');\n    root.appendChild(sorter);\n  }\n  sorter.path = 'name.first';\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`content` | The slotted content wrapper\n`indicators` | The internal sorter indicators.\n`order` | The internal sorter order\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n-------------|-------------|------------\n`direction` | Sort direction of a sorter | :host",
+          "name": "vaadin23-grid-sorter",
+          "description": "`<vaadin23-grid-sorter>` is a helper element for the `<vaadin23-grid>` that provides out-of-the-box UI controls,\nvisual feedback, and handlers for sorting the grid data.\n\n#### Example:\n```html\n<vaadin23-grid-column id=\"column\"></vaadin23-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.renderer = (root, column, model) => {\n  let sorter = root.firstElementChild;\n  if (!sorter) {\n    sorter = document.createElement('vaadin23-grid-sorter');\n    root.appendChild(sorter);\n  }\n  sorter.path = 'name.first';\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`content` | The slotted content wrapper\n`indicators` | The internal sorter indicators.\n`order` | The internal sorter order\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n-------------|-------------|------------\n`direction` | Sort direction of a sorter | :host",
           "attributes": [
             {
               "name": "path",
@@ -954,8 +954,8 @@
           }
         },
         {
-          "name": "vaadin-grid-sort-column",
-          "description": "`<vaadin-grid-sort-column>` is a helper element for the `<vaadin-grid>`\nthat provides default header renderer and functionality for sorting.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-sort-column path=\"name.first\" direction=\"asc\"></vaadin-grid-sort-column>\n\n <vaadin-grid-column>\n   ...\n```",
+          "name": "vaadin23-grid-sort-column",
+          "description": "`<vaadin23-grid-sort-column>` is a helper element for the `<vaadin23-grid>`\nthat provides default header renderer and functionality for sorting.\n\n#### Example:\n```html\n<vaadin23-grid items=\"[[items]]\">\n <vaadin23-grid-sort-column path=\"name.first\" direction=\"asc\"></vaadin23-grid-sort-column>\n\n <vaadin23-grid-column>\n   ...\n```",
           "attributes": [
             {
               "name": "resizable",
@@ -1147,7 +1147,7 @@
               },
               {
                 "name": "headerRenderer",
-                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -1158,7 +1158,7 @@
               },
               {
                 "name": "footerRenderer",
-                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -1189,7 +1189,7 @@
               },
               {
                 "name": "renderer",
-                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
+                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                 "value": {
                   "type": [
                     "GridBodyRenderer",
@@ -1238,8 +1238,8 @@
           }
         },
         {
-          "name": "vaadin-grid-tree-toggle",
-          "description": "`<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\nthat provides toggle and level display functionality for the item tree.\n\n#### Example:\n```html\n<vaadin-grid-column id=\"column\"></vaadin-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.renderer = (root, column, model) => {\n  let treeToggle = root.firstElementChild;\n  if (!treeToggle) {\n    treeToggle = document.createElement('vaadin-grid-tree-toggle');\n    treeToggle.addEventListener('expanded-changed', () => { ... });\n    root.appendChild(treeToggle);\n  }\n  treeToggle.leaf = !model.item.hasChildren;\n  treeToggle.level = level;\n  treeToggle.expanded = expanded;\n  treeToggle.textContent = model.item.name;\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n---|---\n`toggle` | The tree toggle icon\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n---|---|---\n`expanded` | When present, the toggle is expanded | :host\n`leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n\nThe following custom CSS properties are available on\nthe `<vaadin-grid-tree-toggle>` element:\n\nCustom CSS property | Description | Default\n---|---|---\n`--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`",
+          "name": "vaadin23-grid-tree-toggle",
+          "description": "`<vaadin23-grid-tree-toggle>` is a helper element for the `<vaadin23-grid>`\nthat provides toggle and level display functionality for the item tree.\n\n#### Example:\n```html\n<vaadin23-grid-column id=\"column\"></vaadin23-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.renderer = (root, column, model) => {\n  let treeToggle = root.firstElementChild;\n  if (!treeToggle) {\n    treeToggle = document.createElement('vaadin23-grid-tree-toggle');\n    treeToggle.addEventListener('expanded-changed', () => { ... });\n    root.appendChild(treeToggle);\n  }\n  treeToggle.leaf = !model.item.hasChildren;\n  treeToggle.level = level;\n  treeToggle.expanded = expanded;\n  treeToggle.textContent = model.item.name;\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n---|---\n`toggle` | The tree toggle icon\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n---|---|---\n`expanded` | When present, the toggle is expanded | :host\n`leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n\nThe following custom CSS properties are available on\nthe `<vaadin23-grid-tree-toggle>` element:\n\nCustom CSS property | Description | Default\n---|---|---\n`--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`",
           "attributes": [
             {
               "name": "level",
@@ -1319,8 +1319,8 @@
           }
         },
         {
-          "name": "vaadin-grid-tree-column",
-          "description": "`<vaadin-grid-tree-column>` is a helper element for the `<vaadin-grid>`\nthat provides default renderer and functionality for toggling tree/hierarchical items.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-tree-column path=\"name.first\"></vaadin-grid-tree-column>\n\n <vaadin-grid-column>\n   ...\n```",
+          "name": "vaadin23-grid-tree-column",
+          "description": "`<vaadin23-grid-tree-column>` is a helper element for the `<vaadin23-grid>`\nthat provides default renderer and functionality for toggling tree/hierarchical items.\n\n#### Example:\n```html\n<vaadin23-grid items=\"[[items]]\">\n <vaadin23-grid-tree-column path=\"name.first\"></vaadin23-grid-tree-column>\n\n <vaadin23-grid-column>\n   ...\n```",
           "attributes": [
             {
               "name": "resizable",
@@ -1513,7 +1513,7 @@
               },
               {
                 "name": "headerRenderer",
-                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -1524,7 +1524,7 @@
               },
               {
                 "name": "footerRenderer",
-                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
+                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.",
                 "value": {
                   "type": [
                     "GridHeaderFooterRenderer",
@@ -1555,7 +1555,7 @@
               },
               {
                 "name": "renderer",
-                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
+                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin23-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                 "value": {
                   "type": [
                     "GridBodyRenderer",
@@ -1600,8 +1600,8 @@
           }
         },
         {
-          "name": "vaadin-grid",
-          "description": "`<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the\nthe grid can be populated by using renderer callback function.\n\n### Quick Start\n\nStart with an assigning an array to the [`items`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-items) property to visualize your data.\n\nUse the [`<vaadin-grid-column>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\nshorthand properties for the columns to define what gets rendered in the cells of the column.\n\n#### Example:\n```html\n<vaadin-grid>\n  <vaadin-grid-column path=\"name.first\" header=\"First name\"></vaadin-grid-column>\n  <vaadin-grid-column path=\"name.last\" header=\"Last name\"></vaadin-grid-column>\n  <vaadin-grid-column path=\"email\"></vaadin-grid-column>\n</vaadin-grid>\n```\n\nFor custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\n`renderer` and `footerRenderer`.\n\nEach of those renderer functions provides `root`, `column`, `model` arguments when applicable.\nGenerate DOM content, append it to the `root` element and control the state\nof the host element by accessing `column`. Before generating new content,\nusers are able to check if there is already content in `root` for reusing it.\n\nRenderers are called on initialization of new column cells and each time the\nrelated row model is updated. DOM generated during the renderer call can be reused\nin the next renderer call and will be provided with the `root` argument.\nOn first call it will be empty.\n\n#### Example:\n```html\n<vaadin-grid>\n  <vaadin-grid-column></vaadin-grid-column>\n  <vaadin-grid-column></vaadin-grid-column>\n  <vaadin-grid-column></vaadin-grid-column>\n</vaadin-grid>\n```\n```js\nconst grid = document.querySelector('vaadin-grid');\ngrid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\n              {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\n\nconst columns = grid.querySelectorAll('vaadin-grid-column');\n\ncolumns[0].headerRenderer = function(root) {\n  root.textContent = 'Name';\n};\ncolumns[0].renderer = function(root, column, model) {\n  root.textContent = model.item.name;\n};\n\ncolumns[1].headerRenderer = function(root) {\n  root.textContent = 'Surname';\n};\ncolumns[1].renderer = function(root, column, model) {\n  root.textContent = model.item.surname;\n};\n\ncolumns[2].headerRenderer = function(root) {\n  root.textContent = 'Role';\n};\ncolumns[2].renderer = function(root, column, model) {\n  root.textContent = model.item.role;\n};\n```\n\nThe following properties are available in the `model` argument:\n\nProperty name | Type | Description\n--------------|------|------------\n`index`| Number | The index of the item.\n`item` | String or Object | The item.\n`level` | Number | Number of the item's tree sublevel, starts from 0.\n`expanded` | Boolean | True if the item's tree sublevel is expanded.\n`selected` | Boolean | True if the item is selected.\n`detailsOpened` | Boolean | True if the item's row details are open.\n\nThe following helper elements can be used for further customization:\n- [`<vaadin-grid-column-group>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-column-group)\n- [`<vaadin-grid-filter>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-filter)\n- [`<vaadin-grid-sorter>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-sorter)\n- [`<vaadin-grid-selection-column>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-selection-column)\n- [`<vaadin-grid-tree-toggle>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-tree-toggle)\n\n__Note that the helper elements must be explicitly imported.__\nIf you want to import everything at once you can use the `all-imports.html` bundle.\n\n### Lazy Loading with Function Data Provider\n\nIn addition to assigning an array to the items property, you can alternatively\nprovide the `<vaadin-grid>` data through the\n[`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-dataProvider) function property.\nThe `<vaadin-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\nSee the [`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-dataProvider) in\nthe API reference below for the detailed data provider arguments description,\nand the “Assigning Data” page in the demos.\n\n__Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\ngrid.dataProvider = ({page, pageSize}, callback) => {\n  // page: the requested page index\n  // pageSize: number of items on one page\n  const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n\n  fetch(url)\n    .then((res) => res.json())\n    .then(({ employees, totalSize }) => {\n      callback(employees, totalSize);\n    });\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\ngrid.size = 200; // The total number of items\ngrid.dataProvider = ({page, pageSize}, callback) => {\n  const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((resJson) => callback(resJson.employees));\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`row` | Row in the internal table\n`cell` | Cell in the internal table\n`header-cell` | Header cell in the internal table\n`body-cell` | Body cell in the internal table\n`footer-cell` | Footer cell in the internal table\n`details-cell` | Row details cell in the internal table\n`focused-cell` | Focused cell in the internal table\n`resize-handle` | Handle for resizing the columns\n`reorder-ghost` | Ghost element of the header cell being dragged\n\nThe following state attributes are available for styling:\n\nAttribute             | Description                                                                                       | Part name\n----------------------|---------------------------------------------------------------------------------------------------|-----------\n`loading`             | Set when the grid is loading data from data provider                                              | :host\n`interacting`         | Keyboard navigation in interaction mode                                                           | :host\n`navigating`          | Keyboard navigation in navigation mode                                                            | :host\n`overflow`            | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `start`, `end` | :host\n`reordering`          | Set when the grid's columns are being reordered                                                   | :host\n`dragover`            | Set when the grid (not a specific row) is dragged over                                            | :host\n`dragging-rows`       | Set when grid rows are dragged                                                                    | :host\n`reorder-status`      | Reflects the status of a cell while columns are being reordered                                   | cell\n`frozen`              | Frozen cell                                                                                       | cell\n`frozen-to-end`       | Cell frozen to end                                                                                | cell\n`last-frozen`         | Last frozen cell                                                                                  | cell\n`first-frozen-to-end` | First cell frozen to end                                                                          | cell\n`first-column`        | First visible cell on a row                                                                       | cell\n`last-column`         | Last visible cell on a row                                                                        | cell\n`selected`            | Selected row                                                                                      | row\n`expanded`            | Expanded row                                                                                      | row\n`details-opened`      | Row with details open                                                                             | row\n`loading`             | Row that is waiting for data from data provider                                                   | row\n`odd`                 | Odd row                                                                                           | row\n`first`               | The first body row                                                                                | row\n`last`                | The last body row                                                                                 | row\n`dragstart`           | Set for one frame when starting to drag a row. The value is a number when dragging multiple rows  | row\n`dragover`            | Set when the row is dragged over                                                                  | row\n`drag-disabled`       | Set to a row that isn't available for dragging                                                    | row\n`drop-disabled`       | Set to a row that can't be dropped on top of                                                      | row\n\nSee [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.",
+          "name": "vaadin23-grid",
+          "description": "`<vaadin23-grid>` is a free, high quality data grid / data table Web Component. The content of the\nthe grid can be populated by using renderer callback function.\n\n### Quick Start\n\nStart with an assigning an array to the [`items`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-items) property to visualize your data.\n\nUse the [`<vaadin23-grid-column>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\nshorthand properties for the columns to define what gets rendered in the cells of the column.\n\n#### Example:\n```html\n<vaadin23-grid>\n  <vaadin23-grid-column path=\"name.first\" header=\"First name\"></vaadin23-grid-column>\n  <vaadin23-grid-column path=\"name.last\" header=\"Last name\"></vaadin23-grid-column>\n  <vaadin23-grid-column path=\"email\"></vaadin23-grid-column>\n</vaadin23-grid>\n```\n\nFor custom content `vaadin23-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\n`renderer` and `footerRenderer`.\n\nEach of those renderer functions provides `root`, `column`, `model` arguments when applicable.\nGenerate DOM content, append it to the `root` element and control the state\nof the host element by accessing `column`. Before generating new content,\nusers are able to check if there is already content in `root` for reusing it.\n\nRenderers are called on initialization of new column cells and each time the\nrelated row model is updated. DOM generated during the renderer call can be reused\nin the next renderer call and will be provided with the `root` argument.\nOn first call it will be empty.\n\n#### Example:\n```html\n<vaadin23-grid>\n  <vaadin23-grid-column></vaadin23-grid-column>\n  <vaadin23-grid-column></vaadin23-grid-column>\n  <vaadin23-grid-column></vaadin23-grid-column>\n</vaadin23-grid>\n```\n```js\nconst grid = document.querySelector('vaadin23-grid');\ngrid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\n              {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\n\nconst columns = grid.querySelectorAll('vaadin23-grid-column');\n\ncolumns[0].headerRenderer = function(root) {\n  root.textContent = 'Name';\n};\ncolumns[0].renderer = function(root, column, model) {\n  root.textContent = model.item.name;\n};\n\ncolumns[1].headerRenderer = function(root) {\n  root.textContent = 'Surname';\n};\ncolumns[1].renderer = function(root, column, model) {\n  root.textContent = model.item.surname;\n};\n\ncolumns[2].headerRenderer = function(root) {\n  root.textContent = 'Role';\n};\ncolumns[2].renderer = function(root, column, model) {\n  root.textContent = model.item.role;\n};\n```\n\nThe following properties are available in the `model` argument:\n\nProperty name | Type | Description\n--------------|------|------------\n`index`| Number | The index of the item.\n`item` | String or Object | The item.\n`level` | Number | Number of the item's tree sublevel, starts from 0.\n`expanded` | Boolean | True if the item's tree sublevel is expanded.\n`selected` | Boolean | True if the item is selected.\n`detailsOpened` | Boolean | True if the item's row details are open.\n\nThe following helper elements can be used for further customization:\n- [`<vaadin23-grid-column-group>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-column-group)\n- [`<vaadin23-grid-filter>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-filter)\n- [`<vaadin23-grid-sorter>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-sorter)\n- [`<vaadin23-grid-selection-column>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-selection-column)\n- [`<vaadin23-grid-tree-toggle>`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid-tree-toggle)\n\n__Note that the helper elements must be explicitly imported.__\nIf you want to import everything at once you can use the `all-imports.html` bundle.\n\n### Lazy Loading with Function Data Provider\n\nIn addition to assigning an array to the items property, you can alternatively\nprovide the `<vaadin23-grid>` data through the\n[`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-dataProvider) function property.\nThe `<vaadin23-grid>` calls this function lazily, only when it needs more data\nto be displayed.\n\nSee the [`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.4.1/#/elements/vaadin-grid#property-dataProvider) in\nthe API reference below for the detailed data provider arguments description,\nand the “Assigning Data” page in the demos.\n\n__Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n\n__Also, note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```javascript\ngrid.dataProvider = ({page, pageSize}, callback) => {\n  // page: the requested page index\n  // pageSize: number of items on one page\n  const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n\n  fetch(url)\n    .then((res) => res.json())\n    .then(({ employees, totalSize }) => {\n      callback(employees, totalSize);\n    });\n};\n```\n\n__Alternatively, you can use the `size` property to set the total number of items:__\n\n```javascript\ngrid.size = 200; // The total number of items\ngrid.dataProvider = ({page, pageSize}, callback) => {\n  const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((resJson) => callback(resJson.employees));\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`row` | Row in the internal table\n`cell` | Cell in the internal table\n`header-cell` | Header cell in the internal table\n`body-cell` | Body cell in the internal table\n`footer-cell` | Footer cell in the internal table\n`details-cell` | Row details cell in the internal table\n`focused-cell` | Focused cell in the internal table\n`resize-handle` | Handle for resizing the columns\n`reorder-ghost` | Ghost element of the header cell being dragged\n\nThe following state attributes are available for styling:\n\nAttribute             | Description                                                                                       | Part name\n----------------------|---------------------------------------------------------------------------------------------------|-----------\n`loading`             | Set when the grid is loading data from data provider                                              | :host\n`interacting`         | Keyboard navigation in interaction mode                                                           | :host\n`navigating`          | Keyboard navigation in navigation mode                                                            | :host\n`overflow`            | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `start`, `end` | :host\n`reordering`          | Set when the grid's columns are being reordered                                                   | :host\n`dragover`            | Set when the grid (not a specific row) is dragged over                                            | :host\n`dragging-rows`       | Set when grid rows are dragged                                                                    | :host\n`reorder-status`      | Reflects the status of a cell while columns are being reordered                                   | cell\n`frozen`              | Frozen cell                                                                                       | cell\n`frozen-to-end`       | Cell frozen to end                                                                                | cell\n`last-frozen`         | Last frozen cell                                                                                  | cell\n`first-frozen-to-end` | First cell frozen to end                                                                          | cell\n`first-column`        | First visible cell on a row                                                                       | cell\n`last-column`         | Last visible cell on a row                                                                        | cell\n`selected`            | Selected row                                                                                      | row\n`expanded`            | Expanded row                                                                                      | row\n`details-opened`      | Row with details open                                                                             | row\n`loading`             | Row that is waiting for data from data provider                                                   | row\n`odd`                 | Odd row                                                                                           | row\n`first`               | The first body row                                                                                | row\n`last`                | The last body row                                                                                 | row\n`dragstart`           | Set for one frame when starting to drag a row. The value is a number when dragging multiple rows  | row\n`dragover`            | Set when the row is dragged over                                                                  | row\n`drag-disabled`       | Set to a row that isn't available for dragging                                                    | row\n`drop-disabled`       | Set to a row that can't be dropped on top of                                                      | row\n\nSee [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.",
           "attributes": [
             {
               "name": "size",
@@ -1645,7 +1645,7 @@
             },
             {
               "name": "multi-sort",
-              "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
+              "description": "When `true`, all `<vaadin23-grid-sorter>` are applied for sorting.",
               "value": {
                 "type": [
                   "boolean"
@@ -1816,7 +1816,7 @@
               },
               {
                 "name": "rowDetailsRenderer",
-                "description": "Custom function for rendering the content of the row details.\nReceives three arguments:\n\n- `root` The row details content DOM element. Append your content to it.\n- `grid` The `<vaadin-grid>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.level` The number of the item's tree sublevel, starts from 0.\n  - `model.expanded` True if the item's tree sublevel is expanded.\n  - `model.selected` True if the item is selected.",
+                "description": "Custom function for rendering the content of the row details.\nReceives three arguments:\n\n- `root` The row details content DOM element. Append your content to it.\n- `grid` The `<vaadin23-grid>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.level` The number of the item's tree sublevel, starts from 0.\n  - `model.expanded` True if the item's tree sublevel is expanded.\n  - `model.selected` True if the item is selected.",
                 "value": {
                   "type": [
                     "GridRowDetailsRenderer",
@@ -1836,7 +1836,7 @@
               },
               {
                 "name": "multiSort",
-                "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
+                "description": "When `true`, all `<vaadin23-grid-sorter>` are applied for sorting.",
                 "value": {
                   "type": [
                     "boolean"
@@ -1874,7 +1874,7 @@
               },
               {
                 "name": "cellClassNameGenerator",
-                "description": "A function that allows generating CSS class names for grid cells\nbased on their row and column. The return value should be the generated\nclass name as a string, or multiple class names separated by whitespace\ncharacters.\n\nReceives two arguments:\n- `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.",
+                "description": "A function that allows generating CSS class names for grid cells\nbased on their row and column. The return value should be the generated\nclass name as a string, or multiple class names separated by whitespace\ncharacters.\n\nReceives two arguments:\n- `column` The `<vaadin23-grid-column>` element (`undefined` for details-cell).\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.",
                 "value": {
                   "type": [
                     "GridCellClassNameGenerator",
