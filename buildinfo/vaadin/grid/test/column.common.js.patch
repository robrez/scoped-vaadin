Index: test/column.common.js
===================================================================
--- test/column.common.js
+++ test/column.common.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { fixtureSync, nextFrame, nextRender } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
@@ -15,23 +16,23 @@
 class GridContainer extends PolymerElement {
   static get template() {
     return html`
-      <vaadin-grid id="grid" size="10">
-        <vaadin-grid-column-group header="group header1">
-          <vaadin-grid-column
+      <vaadin24-grid id="grid" size="10">
+        <vaadin24-grid-column-group header="group header1">
+          <vaadin24-grid-column
             header="header1"
             footerRenderer="[[footerRenderer1]]"
             renderer="[[cellRenderer]]"
-          ></vaadin-grid-column>
+          ></vaadin24-grid-column>
 
-          <vaadin-grid-column
+          <vaadin24-grid-column
             header="header2"
             footerRenderer="[[footerRenderer2]]"
             renderer="[[cellRenderer]]"
-          ></vaadin-grid-column>
-        </vaadin-grid-column-group>
+          ></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
 
-        <vaadin-grid-column id="emptycolumn"></vaadin-grid-column>
-      </vaadin-grid>
+        <vaadin24-grid-column id="emptycolumn"></vaadin24-grid-column>
+      </vaadin24-grid>
     `;
   }
 
@@ -48,7 +49,7 @@
   }
 }
 
-customElements.define('grid-container', GridContainer);
+internalCustomElements.define('grid-container', GridContainer);
 
 describe('column', () => {
   let container, column, grid, emptyColumn;
@@ -57,7 +58,7 @@
     container = fixtureSync('<grid-container></grid-container>');
     grid = container.$.grid;
     grid.dataProvider = infiniteDataProvider;
-    column = grid.querySelector('vaadin-grid-column');
+    column = grid.querySelector('vaadin24-grid-column');
     emptyColumn = grid.querySelector('#emptycolumn');
     flushGrid(grid);
   });
@@ -189,7 +190,7 @@
       });
 
       it('should not throw on render with initially hidden columns with header/footerRenderer', () => {
-        const newColumn = document.createElement('vaadin-grid-column');
+        const newColumn = document.createElement('vaadin24-grid-column');
         newColumn.hidden = true;
         newColumn.headerRenderer = () => {};
         newColumn.footerRenderer = () => {};
@@ -284,7 +285,7 @@
       });
 
       it('should not invoke body renderers of other columns', () => {
-        const newColumn = document.createElement('vaadin-grid-column');
+        const newColumn = document.createElement('vaadin24-grid-column');
         grid.appendChild(newColumn);
         flushGrid(grid);
         emptyColumn.renderer = sinon.spy();
@@ -354,14 +355,14 @@
       });
 
       it('should not hide the header row', () => {
-        grid.removeChild(grid.querySelector('vaadin-grid-column-group'));
+        grid.removeChild(grid.querySelector('vaadin24-grid-column-group'));
         flushGrid(grid);
         expect(grid.$.header.children[0].hidden).not.to.be.ok;
       });
 
       it('should not hide the header row with empty header', () => {
         emptyColumn.header = '';
-        grid.removeChild(grid.querySelector('vaadin-grid-column-group'));
+        grid.removeChild(grid.querySelector('vaadin24-grid-column-group'));
         flushGrid(grid);
         expect(grid.$.header.children[0].hidden).not.to.be.ok;
       });
@@ -369,7 +370,7 @@
       it('should hide the header row with null header', () => {
         emptyColumn.path = 'foo';
         emptyColumn.header = null;
-        grid.removeChild(grid.querySelector('vaadin-grid-column-group'));
+        grid.removeChild(grid.querySelector('vaadin24-grid-column-group'));
         flushGrid(grid);
         expect(grid.$.header.children[0].hidden).to.be.ok;
       });
@@ -382,7 +383,7 @@
 
       it('should hide the header', () => {
         emptyColumn.header = undefined;
-        grid.removeChild(grid.querySelector('vaadin-grid-column-group'));
+        grid.removeChild(grid.querySelector('vaadin24-grid-column-group'));
         flushGrid(grid);
         expect(getContainerCell(grid.$.header, 0, 0).parentElement.hidden).to.be.true;
       });
@@ -460,9 +461,9 @@
 
     beforeEach(() => {
       grid = fixtureSync(`
-        <vaadin-grid>
-          <vaadin-grid-column></vaadin-grid-column>
-        </vaadin-grid>
+        <vaadin24-grid>
+          <vaadin24-grid-column></vaadin24-grid-column>
+        </vaadin24-grid>
       `);
 
       grid.items = ['item1', 'item2'];
@@ -531,11 +532,11 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid>
-        <vaadin-grid-column path="value"></vaadin-grid-column>
-      </vaadin-grid>
+      <vaadin24-grid>
+        <vaadin24-grid-column path="value"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
-    column = grid.querySelector('vaadin-grid-column');
+    column = grid.querySelector('vaadin24-grid-column');
     grid.size = 1;
     grid.dataProvider = infiniteDataProvider;
     await nextFrame();
