Index: test/lit-renderer-directives.common.js
===================================================================
--- test/lit-renderer-directives.common.js
+++ test/lit-renderer-directives.common.js
@@ -7,20 +7,20 @@
 
 async function renderGrid(container, { items, header, footer, rowDetails }) {
   render(
-    html`<vaadin-grid
+    html`<vaadin24-grid
       .items="${items}"
       ${rowDetails ? gridRowDetailsRenderer(() => html`${rowDetails}`, rowDetails) : null}
     >
-      <vaadin-grid-column
+      <vaadin24-grid-column
         ${items ? columnBodyRenderer((item) => html`${item}`, items) : null}
         ${header ? columnHeaderRenderer(() => html`${header}`, header) : null}
         ${footer ? columnFooterRenderer(() => html`${footer}`, footer) : null}
-      ></vaadin-grid-column>
-    </vaadin-grid>`,
+      ></vaadin24-grid-column>
+    </vaadin24-grid>`,
     container,
   );
   await nextFrame();
-  return container.querySelector('vaadin-grid');
+  return container.querySelector('vaadin24-grid');
 }
 
 describe('lit renderer directives', () => {
@@ -65,13 +65,13 @@
       beforeEach(async () => {
         rendererSpy = sinon.spy();
         render(
-          html`<vaadin-grid .items="${['Item']}" ${gridRowDetailsRenderer(rendererSpy)}>
-            <vaadin-grid-column></vaadin-grid-column>
-          </vaadin-grid>`,
+          html`<vaadin24-grid .items="${['Item']}" ${gridRowDetailsRenderer(rendererSpy)}>
+            <vaadin24-grid-column></vaadin24-grid-column>
+          </vaadin24-grid>`,
           container,
         );
         await nextFrame();
-        grid = container.querySelector('vaadin-grid');
+        grid = container.querySelector('vaadin24-grid');
         grid.openItemDetails(grid.items[0]);
       });
 
@@ -98,7 +98,7 @@
       beforeEach(async () => {
         grid = await renderGrid(container, { items: ['Item'] });
         cell = getContainerCell(grid.$.items, 0, 0);
-        column = grid.querySelector('vaadin-grid-column');
+        column = grid.querySelector('vaadin24-grid-column');
       });
 
       it('should set `renderer` property when the directive is attached', () => {
@@ -126,13 +126,13 @@
       beforeEach(async () => {
         rendererSpy = sinon.spy();
         render(
-          html`<vaadin-grid .items="${['Item']}">
-            <vaadin-grid-column ${columnBodyRenderer(rendererSpy)}></vaadin-grid-column>
-          </vaadin-grid>`,
+          html`<vaadin24-grid .items="${['Item']}">
+            <vaadin24-grid-column ${columnBodyRenderer(rendererSpy)}></vaadin24-grid-column>
+          </vaadin24-grid>`,
           container,
         );
         await nextFrame();
-        grid = container.querySelector('vaadin-grid');
+        grid = container.querySelector('vaadin24-grid');
       });
 
       it('should pass the item to the renderer', () => {
@@ -146,7 +146,7 @@
       });
 
       it('should pass the column instance to the renderer', () => {
-        const column = grid.querySelector('vaadin-grid-column');
+        const column = grid.querySelector('vaadin24-grid-column');
         expect(rendererSpy.firstCall.args[2]).to.equal(column);
       });
     });
@@ -159,7 +159,7 @@
       beforeEach(async () => {
         grid = await renderGrid(container, { header: 'Header' });
         cell = getContainerCell(grid.$.header, 0, 0);
-        column = grid.querySelector('vaadin-grid-column');
+        column = grid.querySelector('vaadin24-grid-column');
       });
 
       it('should set `headerRenderer` property when the directive is attached', () => {
@@ -187,17 +187,17 @@
       beforeEach(async () => {
         rendererSpy = sinon.spy();
         render(
-          html`<vaadin-grid>
-            <vaadin-grid-column ${columnHeaderRenderer(rendererSpy)}></vaadin-grid-column>
-          </vaadin-grid>`,
+          html`<vaadin24-grid>
+            <vaadin24-grid-column ${columnHeaderRenderer(rendererSpy)}></vaadin24-grid-column>
+          </vaadin24-grid>`,
           container,
         );
         await nextFrame();
-        grid = container.querySelector('vaadin-grid');
+        grid = container.querySelector('vaadin24-grid');
       });
 
       it('should pass the column instance to the renderer', () => {
-        const column = grid.querySelector('vaadin-grid-column');
+        const column = grid.querySelector('vaadin24-grid-column');
         expect(rendererSpy.firstCall.args[0]).to.equal(column);
       });
     });
@@ -210,7 +210,7 @@
       beforeEach(async () => {
         grid = await renderGrid(container, { footer: 'Footer' });
         cell = getContainerCell(grid.$.footer, 0, 0);
-        column = grid.querySelector('vaadin-grid-column');
+        column = grid.querySelector('vaadin24-grid-column');
       });
 
       it('should set `footerRenderer` property when the directive is attached', () => {
@@ -238,17 +238,17 @@
       beforeEach(async () => {
         rendererSpy = sinon.spy();
         render(
-          html`<vaadin-grid>
-            <vaadin-grid-column ${columnFooterRenderer(rendererSpy)}></vaadin-grid-column>
-          </vaadin-grid>`,
+          html`<vaadin24-grid>
+            <vaadin24-grid-column ${columnFooterRenderer(rendererSpy)}></vaadin24-grid-column>
+          </vaadin24-grid>`,
           container,
         );
         await nextFrame();
-        grid = container.querySelector('vaadin-grid');
+        grid = container.querySelector('vaadin24-grid');
       });
 
       it('should pass the column instance to the renderer', () => {
-        const column = grid.querySelector('vaadin-grid-column');
+        const column = grid.querySelector('vaadin24-grid-column');
         expect(rendererSpy.firstCall.args[0]).to.equal(column);
       });
     });
