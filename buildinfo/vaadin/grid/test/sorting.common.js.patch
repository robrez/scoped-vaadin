Index: test/sorting.common.js
===================================================================
--- test/sorting.common.js
+++ test/sorting.common.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { click, fixtureSync, keyUpOn, nextFrame } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
@@ -11,7 +12,7 @@
   shiftClick,
 } from './helpers.js';
 
-const Grid = customElements.get('vaadin-grid');
+const Grid = internalCustomElements.get('vaadin24-grid');
 
 describe('sorting', () => {
   describe('sorter', () => {
@@ -19,9 +20,9 @@
 
     beforeEach(async () => {
       sorter = fixtureSync(`
-        <vaadin-grid-sorter path="path">
+        <vaadin24-grid-sorter path="path">
           <span class="title">title</span><button>Button</button>
-        </vaadin-grid-sorter>
+        </vaadin24-grid-sorter>
       `);
       button = sorter.querySelector('button');
       title = sorter.querySelector('.title');
@@ -113,17 +114,17 @@
 
     beforeEach(async () => {
       grid = fixtureSync(`
-        <vaadin-grid style="width: 400px; height: 200px;" multi-sort>
-          <vaadin-grid-sort-column path="first" direction="desc"></vaadin-grid-sort-column>
-          <vaadin-grid-sort-column path="second" direction="asc"></vaadin-grid-sort-column>
-          <vaadin-grid-sort-column path="third" direction="desc"></vaadin-grid-sort-column>
-        </vaadin-grid>
+        <vaadin24-grid style="width: 400px; height: 200px;" multi-sort>
+          <vaadin24-grid-sort-column path="first" direction="desc"></vaadin24-grid-sort-column>
+          <vaadin24-grid-sort-column path="second" direction="asc"></vaadin24-grid-sort-column>
+          <vaadin24-grid-sort-column path="third" direction="desc"></vaadin24-grid-sort-column>
+        </vaadin24-grid>
       `);
       await nextFrame();
 
-      columns = [...grid.querySelectorAll('vaadin-grid-sort-column')];
+      columns = [...grid.querySelectorAll('vaadin24-grid-sort-column')];
       sorters = columns.map((_, colIndex) =>
-        getHeaderCellContent(grid, 0, colIndex).querySelector('vaadin-grid-sorter'),
+        getHeaderCellContent(grid, 0, colIndex).querySelector('vaadin24-grid-sorter'),
       );
 
       grid.items = [
@@ -237,35 +238,35 @@
 
     beforeEach(async () => {
       grid = fixtureSync(`
-        <vaadin-grid style="width: 200px; height: 200px;" multi-sort>
-          <vaadin-grid-column path="first"></vaadin-grid-column>
-          <vaadin-grid-column path="last"></vaadin-grid-column>
-          <vaadin-grid-sort-column></vaadin-grid-sort-column>
-        </vaadin-grid>
+        <vaadin24-grid style="width: 200px; height: 200px;" multi-sort>
+          <vaadin24-grid-column path="first"></vaadin24-grid-column>
+          <vaadin24-grid-column path="last"></vaadin24-grid-column>
+          <vaadin24-grid-sort-column></vaadin24-grid-sort-column>
+        </vaadin24-grid>
       `);
-      columns = [...grid.querySelectorAll('vaadin-grid-column')];
+      columns = [...grid.querySelectorAll('vaadin24-grid-column')];
       columns[0].headerRenderer = (root) => {
         if (!root.firstChild) {
           root.innerHTML = `
-            <vaadin-grid-sorter path="first" direction="asc">
+            <vaadin24-grid-sorter path="first" direction="asc">
               <span class="title">first</span>
-            </vaadin-grid-sorter>
+            </vaadin24-grid-sorter>
           `;
         }
       };
       columns[1].headerRenderer = (root) => {
         if (!root.firstChild) {
           root.innerHTML = `
-            <vaadin-grid-sorter path="last" direction="desc">
+            <vaadin24-grid-sorter path="last" direction="desc">
               <span class="title">last</span>
-            </vaadin-grid-sorter>
+            </vaadin24-grid-sorter>
           `;
         }
       };
       await nextFrame();
 
       sorters = columns.map((_, colIndex) =>
-        getHeaderCellContent(grid, 0, colIndex).querySelector('vaadin-grid-sorter'),
+        getHeaderCellContent(grid, 0, colIndex).querySelector('vaadin24-grid-sorter'),
       );
 
       grid.items = [
@@ -607,29 +608,29 @@
 
     describe('set multi-sort-priority', () => {
       it('should change default multi-sort-priority for newly created grid', () => {
-        const grid1 = fixtureSync('<vaadin-grid></vaadin-grid>');
+        const grid1 = fixtureSync('<vaadin24-grid></vaadin24-grid>');
         expect(grid1.multiSortPriority).to.be.equal('prepend');
 
         Grid.setDefaultMultiSortPriority('append');
 
-        const grid2 = fixtureSync('<vaadin-grid></vaadin-grid>');
+        const grid2 = fixtureSync('<vaadin24-grid></vaadin24-grid>');
         expect(grid1.multiSortPriority).to.be.equal('prepend');
         expect(grid2.multiSortPriority).to.be.equal('append');
 
         Grid.setDefaultMultiSortPriority('prepend');
 
-        const grid3 = fixtureSync('<vaadin-grid></vaadin-grid>');
+        const grid3 = fixtureSync('<vaadin24-grid></vaadin24-grid>');
         expect(grid2.multiSortPriority).to.be.equal('append');
         expect(grid3.multiSortPriority).to.be.equal('prepend');
       });
 
       it('should not change default multi-sort-priority with incorrect value', () => {
-        const grid1 = fixtureSync('<vaadin-grid></vaadin-grid>');
+        const grid1 = fixtureSync('<vaadin24-grid></vaadin24-grid>');
         expect(grid1.multiSortPriority).to.be.equal('prepend');
 
         Grid.setDefaultMultiSortPriority(null);
 
-        const grid2 = fixtureSync('<vaadin-grid></vaadin-grid>');
+        const grid2 = fixtureSync('<vaadin24-grid></vaadin24-grid>');
         expect(grid2.multiSortPriority).to.be.equal('prepend');
       });
     });
@@ -693,9 +694,9 @@
       let sortColumn, sortCellContent, sorter;
 
       beforeEach(() => {
-        sortColumn = grid.querySelector('vaadin-grid-sort-column');
+        sortColumn = grid.querySelector('vaadin24-grid-sort-column');
         sortCellContent = getHeaderCellContent(grid, 0, 2);
-        sorter = sortCellContent.querySelector('vaadin-grid-sorter');
+        sorter = sortCellContent.querySelector('vaadin24-grid-sorter');
       });
 
       it('should propagate path property to the internal grid sorter', () => {
@@ -744,18 +745,18 @@
 
     beforeEach(() => {
       grid = fixtureSync(`
-        <vaadin-grid style="width: 200px; height: 200px;">
-          <vaadin-grid-column path="first"></vaadin-grid-column>
-          <vaadin-grid-column path="last"></vaadin-grid-column>
-        </vaadin-grid>
+        <vaadin24-grid style="width: 200px; height: 200px;">
+          <vaadin24-grid-column path="first"></vaadin24-grid-column>
+          <vaadin24-grid-column path="last"></vaadin24-grid-column>
+        </vaadin24-grid>
       `);
-      const columns = grid.querySelectorAll('vaadin-grid-column');
+      const columns = grid.querySelectorAll('vaadin24-grid-column');
       columns[0].headerRenderer = (root) => {
         if (!root.firstChild) {
           root.innerHTML = `
-            <vaadin-grid-sorter path="first" direction="asc">
+            <vaadin24-grid-sorter path="first" direction="asc">
               <span class="title">first</span>
-            </vaadin-grid-sorter>
+            </vaadin24-grid-sorter>
           `;
         }
       };
@@ -763,7 +764,7 @@
         if (!root.firstChild) {
           root.innerHTML = `
             <span class="title">last</span>
-            <vaadin-grid-sorter path="last"></vaadin-grid-sorter>
+            <vaadin24-grid-sorter path="last"></vaadin24-grid-sorter>
           `;
         }
       };
@@ -771,7 +772,7 @@
     });
 
     it('should set direction to also other than last sorter', () => {
-      const sorterFirst = getHeaderCellContent(grid, 0, 0).querySelector('vaadin-grid-sorter');
+      const sorterFirst = getHeaderCellContent(grid, 0, 0).querySelector('vaadin24-grid-sorter');
       expect(sorterFirst.direction).to.eql('asc');
     });
   });
@@ -781,28 +782,28 @@
 
     beforeEach(async () => {
       grid = fixtureSync(`
-        <vaadin-grid style="width: 200px; height: 200px;" multi-sort>
-          <vaadin-grid-column path="first"></vaadin-grid-column>
-          <vaadin-grid-column path="last"></vaadin-grid-column>
-        </vaadin-grid>
+        <vaadin24-grid style="width: 200px; height: 200px;" multi-sort>
+          <vaadin24-grid-column path="first"></vaadin24-grid-column>
+          <vaadin24-grid-column path="last"></vaadin24-grid-column>
+        </vaadin24-grid>
       `);
-      firstNameColumn = grid.querySelector('vaadin-grid-column');
+      firstNameColumn = grid.querySelector('vaadin24-grid-column');
       firstNameColumn.headerRenderer = (root) => {
         if (!root.firstChild) {
-          root.innerHTML = '<vaadin-grid-sorter path="first">First name</vaadin-grid-sorter>';
+          root.innerHTML = '<vaadin24-grid-sorter path="first">First name</vaadin24-grid-sorter>';
         }
       };
       grid.items = [{ first: 'John', last: 'Doe' }];
       flushGrid(grid);
       await nextFrame();
-      firstNameSorter = grid.querySelector('vaadin-grid-sorter');
+      firstNameSorter = grid.querySelector('vaadin24-grid-sorter');
     });
 
     it('should remove detached sorter with no parent', () => {
       firstNameSorter.click();
 
       firstNameColumn.headerRenderer = (root) => {
-        root.innerHTML = '<vaadin-grid-sorter path="first">1st</vaadin-grid-sorter>';
+        root.innerHTML = '<vaadin24-grid-sorter path="first">1st</vaadin24-grid-sorter>';
       };
       grid.requestContentUpdate();
 
