Index: test/column-auto-width.test.js
===================================================================
--- test/column-auto-width.test.js
+++ test/column-auto-width.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@vaadin/chai-plugins';
 import { aTimeout, fixtureSync, nextFrame, oneEvent } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
@@ -65,19 +66,19 @@
     }
   }
 
-  customElements.define('test-container', TestContainer);
+  internalCustomElements.define('test-container', TestContainer);
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 600px; height: 200px;" hidden>
-        <vaadin-grid-column auto-width flex-grow="0" path="a"></vaadin-grid-column>
-        <vaadin-grid-column auto-width flex-grow="0" path="b"></vaadin-grid-column>
-        <vaadin-grid-column auto-width flex-grow="0" path="c"></vaadin-grid-column>
-        <vaadin-grid-column auto-width flex-grow="0" path="d" header="foo bar baz"></vaadin-grid-column>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 600px; height: 200px;" hidden>
+        <vaadin24-grid-column auto-width flex-grow="0" path="a"></vaadin24-grid-column>
+        <vaadin24-grid-column auto-width flex-grow="0" path="b"></vaadin24-grid-column>
+        <vaadin24-grid-column auto-width flex-grow="0" path="c"></vaadin24-grid-column>
+        <vaadin24-grid-column auto-width flex-grow="0" path="d" header="foo bar baz"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
     spy = sinon.spy(grid, '_recalculateColumnWidths');
-    columns = grid.querySelectorAll('vaadin-grid-column');
+    columns = grid.querySelectorAll('vaadin24-grid-column');
     // Show the grid and wait for animationend event ("vaadin-grid-appear")
     // to ensure the grid is in a consistent state before starting each test
     grid.hidden = false;
@@ -100,7 +101,7 @@
     grid.items = [{ a: 'a' }, { a: 'aaaaaaaa' }];
     await nextFrame();
 
-    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin-grid-column'), [101]);
+    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin24-grid-column'), [101]);
   });
 
   it('should not update column widths when items are set after setting a non-empty items array', async () => {
@@ -112,7 +113,7 @@
     grid.items = [{ a: 'a' }, { a: 'a' }];
     await nextFrame();
 
-    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin-grid-column'), [101]);
+    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin24-grid-column'), [101]);
   });
 
   it('should have correct column widths when items are set after setting an lazy data provider', async () => {
@@ -130,7 +131,7 @@
     grid.items = [{ a: 'a' }, { a: 'aaaaaaaa' }];
     await nextFrame();
 
-    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin-grid-column'));
+    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin24-grid-column'));
   });
 
   it('should have correct column widths when the grid is visually scaled', async () => {
@@ -143,15 +144,15 @@
 
   it('should have correct column widths when the grid has an undefined height', async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 600px; height: 100%;">
-        <vaadin-grid-column auto-width flex-grow="0" path="a"></vaadin-grid-column>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 600px; height: 100%;">
+        <vaadin24-grid-column auto-width flex-grow="0" path="a"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
     grid.items = [{ a: 'aaaaaaaaaaaaaaa' }];
     spy = sinon.spy(grid, '_recalculateColumnWidths');
     await recalculateWidths();
 
-    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin-grid-column'), [163]);
+    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin24-grid-column'), [163]);
   });
 
   it('should have correct column widths when using lazy dataProvider', async () => {
@@ -182,15 +183,15 @@
 
   it('should have correct column widths once initially visible', async () => {
     const grid = fixtureSync(`
-      <vaadin-grid style="width: 600px; height: 200px;" hidden>
-        <vaadin-grid-column auto-width flex-grow="0" header="foo bar baz"></vaadin-grid-column>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 600px; height: 200px;" hidden>
+        <vaadin24-grid-column auto-width flex-grow="0" header="foo bar baz"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
 
     await nextFrame();
     grid.hidden = false;
     await oneEvent(grid, 'animationend');
-    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin-grid-column'), [107]);
+    expectColumnWidthsToBeOk(grid.querySelectorAll('vaadin24-grid-column'), [107]);
   });
 
   it('should have correct column widths once an invisible column is made visible', async () => {
@@ -271,7 +272,7 @@
 
     fixtureSync(`
       <style>
-        vaadin-grid::part(cell) {
+        vaadin24-grid::part(cell) {
           padding-right: 20px;
         }
       </style>
@@ -303,15 +304,15 @@
     // Replace 'a' column with a new one
     grid.removeChild(columns[0]);
     grid.insertBefore(newColumn, columns[1]);
-    columns = grid.querySelectorAll(`${tagName}, vaadin-grid-column`);
+    columns = grid.querySelectorAll(`${tagName}, vaadin24-grid-column`);
     grid.items = testItems;
 
     // Define the custom column element after a delay
     await new Promise((resolve) => {
       setTimeout(() => {
-        customElements.define(
+        internalCustomElements.define(
           tagName,
-          class extends customElements.get('vaadin-grid-column') {
+          class extends internalCustomElements.get('vaadin24-grid-column') {
             static is = tagName;
           },
         );
@@ -324,13 +325,13 @@
   });
 
   it('should have correct column widths for lazily added columns', async () => {
-    const grid = fixtureSync(`<vaadin-grid style="width: 600px; height: 200px;">
-      <vaadin-grid-column header="Foo"></vaadin-grid-column>
-    </vaadin-grid>`);
+    const grid = fixtureSync(`<vaadin24-grid style="width: 600px; height: 200px;">
+      <vaadin24-grid-column header="Foo"></vaadin24-grid-column>
+    </vaadin24-grid>`);
     await nextFrame();
 
     fixtureSync(
-      `<vaadin-grid-column id="new" flex-grow="0" header="foo bar baz" auto-width></vaadin-grid-column>`,
+      `<vaadin24-grid-column id="new" flex-grow="0" header="foo bar baz" auto-width></vaadin24-grid-column>`,
       grid,
     );
     const newColumn = grid.querySelector('vaadin-grid-column#new');
@@ -375,12 +376,12 @@
 
   describe('focusButtonMode column', () => {
     beforeEach(async () => {
-      const column = document.createElement('vaadin-grid-column');
+      const column = document.createElement('vaadin24-grid-column');
       column.autoWidth = true;
       column.path = 'b';
       column._focusButtonMode = true;
       grid.insertBefore(column, grid.firstElementChild);
-      columns = grid.querySelectorAll('vaadin-grid-column');
+      columns = grid.querySelectorAll('vaadin24-grid-column');
 
       await aTimeout(0);
     });
@@ -399,9 +400,9 @@
 
   beforeEach(() => {
     grid = fixtureSync(`
-      <vaadin-grid>
-        <vaadin-grid-tree-column auto-width path="name" flex-grow="0"></vaadin-grid-tree-column>
-      </vaadin-grid>
+      <vaadin24-grid>
+        <vaadin24-grid-tree-column auto-width path="name" flex-grow="0"></vaadin24-grid-tree-column>
+      </vaadin24-grid>
     `);
 
     const data = [
@@ -429,9 +430,9 @@
 
   beforeEach(() => {
     grid = fixtureSync(`
-      <vaadin-grid>
-        <vaadin-grid-tree-column auto-width path="name"></vaadin-grid-tree-column>
-      </vaadin-grid>
+      <vaadin24-grid>
+        <vaadin24-grid-tree-column auto-width path="name"></vaadin24-grid-tree-column>
+      </vaadin24-grid>
     `);
   });
 
@@ -498,7 +499,7 @@
   const num = (str) => parseInt(str, 10);
 
   function expectColumnsWidthToBeOk(grid, ws, delta = 5) {
-    const columns = grid.querySelectorAll('vaadin-grid-column');
+    const columns = grid.querySelectorAll('vaadin24-grid-column');
 
     Array.from(columns).forEach((col, i) => {
       const columnWidth = num(col.width);
@@ -516,11 +517,11 @@
 
   it('should consider column group when calculating column width', async () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group header="a lengthy header that should change the width of the column">
-          <vaadin-grid-column auto-width path="a" header="small header"></vaadin-grid-column>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group header="a lengthy header that should change the width of the column">
+          <vaadin24-grid-column auto-width path="a" header="small header"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
     await nextFrame();
     expectColumnsWidthToBeOk(grid, [420], 25);
@@ -528,12 +529,12 @@
 
   it('should distribute the excess space to all columns', async () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group header="a lengthy header that should change the width of the column">
-          <vaadin-grid-column auto-width path="a" header="small header"></vaadin-grid-column>
-          <vaadin-grid-column auto-width path="b" header="small header"></vaadin-grid-column>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group header="a lengthy header that should change the width of the column">
+          <vaadin24-grid-column auto-width path="a" header="small header"></vaadin24-grid-column>
+          <vaadin24-grid-column auto-width path="b" header="small header"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
     await nextFrame();
     expectColumnsWidthToBeOk(grid, [217, 217], 20);
@@ -544,30 +545,30 @@
 
     const grid = createGrid(
       `
-        <vaadin-grid style="width: 200px">
-          <vaadin-grid-column-group header="HeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeader">
-            <vaadin-grid-column auto-width path="first"></vaadin-grid-column>
-            <vaadin-grid-column auto-width path="last"></vaadin-grid-column>
-          </vaadin-grid-column-group>
-        </vaadin-grid>
+        <vaadin24-grid style="width: 200px">
+          <vaadin24-grid-column-group header="HeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeader">
+            <vaadin24-grid-column auto-width path="first"></vaadin24-grid-column>
+            <vaadin24-grid-column auto-width path="last"></vaadin24-grid-column>
+          </vaadin24-grid-column-group>
+        </vaadin24-grid>
       `,
       items,
     );
 
     const gridWithFlexGrow = createGrid(
       `
-        <vaadin-grid style="width: 200px">
-          <vaadin-grid-column-group header="HeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeader">
-            <vaadin-grid-column auto-width flex-grow="3" path="first"></vaadin-grid-column>
-            <vaadin-grid-column auto-width path="last"></vaadin-grid-column>
-          </vaadin-grid-column-group>
-        </vaadin-grid>
+        <vaadin24-grid style="width: 200px">
+          <vaadin24-grid-column-group header="HeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeaderHeader">
+            <vaadin24-grid-column auto-width flex-grow="3" path="first"></vaadin24-grid-column>
+            <vaadin24-grid-column auto-width path="last"></vaadin24-grid-column>
+          </vaadin24-grid-column-group>
+        </vaadin24-grid>
       `,
       items,
     );
 
-    const [columnA, columnB] = grid.querySelectorAll('vaadin-grid-column');
-    const [columnA2, columnB2] = gridWithFlexGrow.querySelectorAll('vaadin-grid-column');
+    const [columnA, columnB] = grid.querySelectorAll('vaadin24-grid-column');
+    const [columnA2, columnB2] = gridWithFlexGrow.querySelectorAll('vaadin24-grid-column');
 
     expect(columnA.width).to.equal(columnA2.width);
     expect(columnB.width).to.equal(columnB2.width);
@@ -575,27 +576,27 @@
 
   it('should distribute the excess space to all columns according to their initial width', async () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group header="a lengthy header that should change the width of the column">
-          <vaadin-grid-column auto-width path="a" header="header"></vaadin-grid-column>
-          <vaadin-grid-column auto-width path="b" header="headerheader"></vaadin-grid-column>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group header="a lengthy header that should change the width of the column">
+          <vaadin24-grid-column auto-width path="a" header="header"></vaadin24-grid-column>
+          <vaadin24-grid-column auto-width path="b" header="headerheader"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
     await nextFrame();
-    const [columnA, columnB] = grid.querySelectorAll('vaadin-grid-column');
+    const [columnA, columnB] = grid.querySelectorAll('vaadin24-grid-column');
     expect(num(columnB.width)).to.be.greaterThan(num(columnA.width));
   });
 
   it('should consider all the parent vaadin-grid-column-groups when calculating the necessary width', async () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group header="a lengthy header, greater than immediate column-group">
-          <vaadin-grid-column-group header="immediate column-group">
-            <vaadin-grid-column auto-width path="a" header="header"></vaadin-grid-column>
-          </vaadin-grid-column-group>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group header="a lengthy header, greater than immediate column-group">
+          <vaadin24-grid-column-group header="immediate column-group">
+            <vaadin24-grid-column auto-width path="a" header="header"></vaadin24-grid-column>
+          </vaadin24-grid-column-group>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
     await nextFrame();
     expectColumnsWidthToBeOk(grid, [403], 30);
@@ -603,11 +604,11 @@
 
   it('should consider vaadin-grid-column header when calculating column width', async () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group header="small header">
-          <vaadin-grid-column auto-width path="a" header="a lengthy header that should change the width of the column"></vaadin-grid-column>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group header="small header">
+          <vaadin24-grid-column auto-width path="a" header="a lengthy header that should change the width of the column"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
     await nextFrame();
     expectColumnsWidthToBeOk(grid, [420], 25);
@@ -615,15 +616,15 @@
 
   it('should consider vaadin-grid-column-group footer when calculating column width', () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group>
-          <vaadin-grid-column auto-width path="a" header="header"></vaadin-grid-column>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group>
+          <vaadin24-grid-column auto-width path="a" header="header"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
 
-    const columnGroup = document.querySelector('vaadin-grid-column-group');
-    const column = document.querySelector('vaadin-grid-column');
+    const columnGroup = document.querySelector('vaadin24-grid-column-group');
+    const column = document.querySelector('vaadin24-grid-column');
 
     columnGroup.footerRenderer = (root) => {
       const footer = document.createElement('footer');
@@ -645,15 +646,15 @@
 
   it('should consider vaadin-grid-column footer when calculating column width', () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column-group>
-          <vaadin-grid-column auto-width path="a" header="header"></vaadin-grid-column>
-        </vaadin-grid-column-group>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column-group>
+          <vaadin24-grid-column auto-width path="a" header="header"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
+      </vaadin24-grid>
     `);
 
-    const columnGroup = document.querySelector('vaadin-grid-column-group');
-    const column = document.querySelector('vaadin-grid-column');
+    const columnGroup = document.querySelector('vaadin24-grid-column-group');
+    const column = document.querySelector('vaadin24-grid-column');
 
     columnGroup.footerRenderer = (root) => {
       const footer = document.createElement('footer');
@@ -675,12 +676,12 @@
 
   it('should not error when there is no vaadin-grid-column-group', () => {
     const grid = createGrid(`
-      <vaadin-grid style="width: 200px">
-        <vaadin-grid-column auto-width path="a" header="header"></vaadin-grid-column>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 200px">
+        <vaadin24-grid-column auto-width path="a" header="header"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
 
-    const column = document.querySelector('vaadin-grid-column');
+    const column = document.querySelector('vaadin24-grid-column');
 
     column.footerRenderer = (root) => {
       const footer = document.createElement('footer');
