Index: test/column-reordering.test.js
===================================================================
--- test/column-reordering.test.js
+++ test/column-reordering.test.js
@@ -1,10 +1,10 @@
 import { expect } from '@esm-bundle/chai';
 import { aTimeout, fixtureSync, nextFrame } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
-import '@vaadin/polymer-legacy-adapter/template-renderer.js';
+import '@scoped-vaadin/polymer-legacy-adapter/template-renderer.js';
 import '../vaadin-grid.js';
 import '../vaadin-grid-column-group.js';
-import { isTouch } from '@vaadin/component-base/src/browser-utils.js';
+import { isTouch } from '@scoped-vaadin/component-base/src/browser-utils.js';
 import {
   dragAndDropOver,
   dragOver,
@@ -60,20 +60,20 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 450px; height: 200px;" size="1" column-reordering-allowed>
+      <vaadin24-grid style="width: 450px; height: 200px;" size="1" column-reordering-allowed>
         ${[1, 2, 3, 4].map((col) => {
           return `
-            <vaadin-grid-column resizable index="${col}">
+            <vaadin24-grid-column resizable index="${col}">
               <template class="header"><span hidden>0</span><span>${col}</span></template>
               <template>${col}</template>
               <template class="footer">${col}</template>
-            </vaadin-grid-column>
+            </vaadin24-grid-column>
           `;
         })}
         <template class="row-details">
           foo
         </template>
-      </vaadin-grid>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
@@ -314,7 +314,7 @@
 
     it('should set order to new column', async () => {
       dragAndDropOver(headerContent[0], headerContent[1]);
-      const col = document.createElement('vaadin-grid-column');
+      const col = document.createElement('vaadin24-grid-column');
       col.innerHTML = '<template>[[index]]</template>';
       grid.appendChild(col);
       await nextFrame();
@@ -333,7 +333,7 @@
 
   describe('frozen columns', () => {
     beforeEach(() => {
-      const columns = grid.querySelectorAll('vaadin-grid-column');
+      const columns = grid.querySelectorAll('vaadin24-grid-column');
       columns[0].frozen = true;
       columns[1].frozen = true;
     });
@@ -371,7 +371,7 @@
 
   describe('columns frozen to end', () => {
     beforeEach(() => {
-      const columns = grid.querySelectorAll('vaadin-grid-column');
+      const columns = grid.querySelectorAll('vaadin24-grid-column');
       columns[2].frozenToEnd = true;
       columns[3].frozenToEnd = true;
     });
@@ -413,25 +413,25 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 800px; height: 200px;" size="1" column-reordering-allowed>
+      <vaadin24-grid style="width: 800px; height: 200px;" size="1" column-reordering-allowed>
         ${[1, 2, 3].map((colgroup) => {
           return `
-            <vaadin-grid-column-group>
+            <vaadin24-grid-column-group>
               <template class="header">${colgroup}</template>
               <template class="footer">${colgroup}</template>
               ${[1, 2].map((col) => {
                 return `
-                  <vaadin-grid-column>
+                  <vaadin24-grid-column>
                     <template class="header">${colgroup}${col}</template>
                     <template>${colgroup}${col}</template>
                     <template class="footer">${colgroup}${col}</template>
-                  </vaadin-grid-column>
+                  </vaadin24-grid-column>
                 `;
               })}
-            </vaadin-grid-column-group>
+            </vaadin24-grid-column-group>
           `;
         })}
-      </vaadin-grid>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
@@ -494,7 +494,7 @@
     let groups;
 
     beforeEach(() => {
-      groups = Array.from(grid.querySelectorAll('vaadin-grid-column-group'));
+      groups = Array.from(grid.querySelectorAll('vaadin24-grid-column-group'));
     });
 
     it('should reflect the physically reordered columns order', () => {
@@ -504,7 +504,7 @@
     });
 
     it('should reflect the physically reordered child columns order', async () => {
-      const columns = groups[0].querySelectorAll('vaadin-grid-column');
+      const columns = groups[0].querySelectorAll('vaadin24-grid-column');
       groups[0].insertBefore(columns[1], columns[0]);
       await nextFrame();
       flushGrid(grid);
@@ -514,7 +514,7 @@
     it('should reset drag orders on physical order', async () => {
       dragAndDropOver(getVisualHeaderCellContent(grid, 1, 2), getVisualHeaderCellContent(grid, 1, 3));
       expectVisualOrder(grid, [11, 12, 22, 21]);
-      const columns = groups[0].querySelectorAll('vaadin-grid-column');
+      const columns = groups[0].querySelectorAll('vaadin24-grid-column');
 
       groups[0].insertBefore(columns[1], columns[0]);
       await nextFrame();
@@ -529,16 +529,16 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
-        <vaadin-grid-column width="50px" flex-grow="0">
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+        <vaadin24-grid-column width="50px" flex-grow="0">
           <template class="header">1</template>
           <template>1</template>
-        </vaadin-grid-column>
-        <vaadin-grid-column width="100px" flex-grow="0">
+        </vaadin24-grid-column>
+        <vaadin24-grid-column width="100px" flex-grow="0">
           <template class="header">2</template>
           <template>2</template>
-        </vaadin-grid-column>
-      </vaadin-grid>
+        </vaadin24-grid-column>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
@@ -565,24 +565,24 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
-        <vaadin-grid-column-group>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+        <vaadin24-grid-column-group>
           ${[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((col) => {
             return `
-              <vaadin-grid-column width="10px">
+              <vaadin24-grid-column width="10px">
                 <template class="header">${col}</template>
                 <template>${col}</template>
                 <template class="footer">${col}</template>
-              </vaadin-grid-column>
+              </vaadin24-grid-column>
             `;
           })}
-        </vaadin-grid-column-group>
-        <vaadin-grid-column width="10px">
+        </vaadin24-grid-column-group>
+        <vaadin24-grid-column width="10px">
           <template class="header">12</template>
           <template>12</template>
           <template class="footer">12</template>
-        </vaadin-grid-column>
-      </vaadin-grid>
+        </vaadin24-grid-column>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
@@ -599,10 +599,10 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
         ${[1, 2].map((col) => {
           return `
-            <vaadin-grid-column resizable>
+            <vaadin24-grid-column resizable>
               <template class="header">
                 <div draggable="true">${col}</div>
               </template>
@@ -612,10 +612,10 @@
               <template class="footer">
                 <div draggable="true">${col}</div>
               </template>
-            </vaadin-grid-column>
+            </vaadin24-grid-column>
           `;
         })}
-      </vaadin-grid>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
@@ -653,21 +653,21 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
-        <vaadin-grid-column-group>
-          <vaadin-grid-column>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+        <vaadin24-grid-column-group>
+          <vaadin24-grid-column>
             <template class="header">1</template>
             <template>1</template>
             <template class="footer">1</template>
-          </vaadin-grid-column>
-        </vaadin-grid-column-group>
+          </vaadin24-grid-column>
+        </vaadin24-grid-column-group>
 
-        <vaadin-grid-column>
+        <vaadin24-grid-column>
           <template class="header">2</template>
           <template>2</template>
           <template class="footer">2</template>
-        </vaadin-grid-column>
-      </vaadin-grid>
+        </vaadin24-grid-column>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
