Index: test/column-reordering.common.js
===================================================================
--- test/column-reordering.common.js
+++ test/column-reordering.common.js
@@ -1,7 +1,7 @@
 import { expect } from '@vaadin/chai-plugins';
 import { aTimeout, fixtureSync, nextFrame } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
-import { isTouch } from '@vaadin/component-base/src/browser-utils.js';
+import { isTouch } from '@scoped-vaadin/component-base/src/browser-utils.js';
 import {
   attributeRenderer,
   dragAndDropOver,
@@ -58,20 +58,20 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 450px; height: 200px;" size="1" column-reordering-allowed>
+      <vaadin24-grid style="width: 450px; height: 200px;" size="1" column-reordering-allowed>
         ${[1, 2, 3, 4].map((col) => {
           return `
-            <vaadin-grid-column resizable index="${col}"></vaadin-grid-column>
+            <vaadin24-grid-column resizable index="${col}"></vaadin24-grid-column>
           `;
         })}
-      </vaadin-grid>
+      </vaadin24-grid>
     `);
 
     grid.rowDetailsRenderer = (root) => {
       root.textContent = 'foo';
     };
 
-    grid.querySelectorAll('vaadin-grid-column').forEach((col) => {
+    grid.querySelectorAll('vaadin24-grid-column').forEach((col) => {
       col.headerRenderer = (root, column) => {
         root.innerHTML = `<span hidden>0</span><span>${column.getAttribute('index')}</span>`;
       };
@@ -350,7 +350,7 @@
 
     it('should set order to new column', async () => {
       dragAndDropOver(headerContent[0], headerContent[1]);
-      const col = document.createElement('vaadin-grid-column');
+      const col = document.createElement('vaadin24-grid-column');
       grid.appendChild(col);
       await nextFrame();
       expect(col._order).to.equal(50000000);
@@ -368,12 +368,12 @@
     describe('focus button mode', () => {
       beforeEach(() => {
         grid = fixtureSync(`
-          <vaadin-grid column-reordering-allowed>
-            <vaadin-grid-column path="name"></vaadin-grid-column>
-            <vaadin-grid-column path="age"></vaadin-grid-column>
-          </vaadin-grid>
+          <vaadin24-grid column-reordering-allowed>
+            <vaadin24-grid-column path="name"></vaadin24-grid-column>
+            <vaadin24-grid-column path="age"></vaadin24-grid-column>
+          </vaadin24-grid>
         `);
-        grid.querySelectorAll('vaadin-grid-column').forEach((col) => {
+        grid.querySelectorAll('vaadin24-grid-column').forEach((col) => {
           col._focusButtonMode = true;
         });
         grid.items = [
@@ -403,7 +403,7 @@
 
   describe('frozen columns', () => {
     beforeEach(() => {
-      const columns = grid.querySelectorAll('vaadin-grid-column');
+      const columns = grid.querySelectorAll('vaadin24-grid-column');
       columns[0].frozen = true;
       columns[1].frozen = true;
     });
@@ -441,7 +441,7 @@
 
   describe('columns frozen to end', () => {
     beforeEach(() => {
-      const columns = grid.querySelectorAll('vaadin-grid-column');
+      const columns = grid.querySelectorAll('vaadin24-grid-column');
       columns[2].frozenToEnd = true;
       columns[3].frozenToEnd = true;
     });
@@ -483,26 +483,26 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 800px; height: 200px;" size="1" column-reordering-allowed>
+      <vaadin24-grid style="width: 800px; height: 200px;" size="1" column-reordering-allowed>
         ${[1, 2, 3].map((colgroup) => {
           return `
-            <vaadin-grid-column-group header="${colgroup}" footer="${colgroup}">
+            <vaadin24-grid-column-group header="${colgroup}" footer="${colgroup}">
               ${[1, 2].map((col) => {
                 return `
-                  <vaadin-grid-column header="${colgroup}${col}" footer="${colgroup}${col}" prefix="${colgroup}${col}"></vaadin-grid-column>
+                  <vaadin24-grid-column header="${colgroup}${col}" footer="${colgroup}${col}" prefix="${colgroup}${col}"></vaadin24-grid-column>
                 `;
               })}
-            </vaadin-grid-column-group>
+            </vaadin24-grid-column-group>
           `;
         })}
-      </vaadin-grid>
+      </vaadin24-grid>
     `);
 
-    grid.querySelectorAll('vaadin-grid-column-group').forEach((group) => {
+    grid.querySelectorAll('vaadin24-grid-column-group').forEach((group) => {
       group.footerRenderer = attributeRenderer('footer');
     });
 
-    grid.querySelectorAll('vaadin-grid-column').forEach((column) => {
+    grid.querySelectorAll('vaadin24-grid-column').forEach((column) => {
       column.footerRenderer = attributeRenderer('footer');
       column.renderer = attributeRenderer('prefix');
     });
@@ -568,7 +568,7 @@
     let groups;
 
     beforeEach(() => {
-      groups = Array.from(grid.querySelectorAll('vaadin-grid-column-group'));
+      groups = Array.from(grid.querySelectorAll('vaadin24-grid-column-group'));
     });
 
     it('should reflect the physically reordered columns order', () => {
@@ -578,7 +578,7 @@
     });
 
     it('should reflect the physically reordered child columns order', async () => {
-      const columns = groups[0].querySelectorAll('vaadin-grid-column');
+      const columns = groups[0].querySelectorAll('vaadin24-grid-column');
       groups[0].insertBefore(columns[1], columns[0]);
       await nextFrame();
       flushGrid(grid);
@@ -588,7 +588,7 @@
     it('should reset drag orders on physical order', async () => {
       dragAndDropOver(getVisualHeaderCellContent(grid, 1, 2), getVisualHeaderCellContent(grid, 1, 3));
       expectVisualOrder(grid, [11, 12, 22, 21]);
-      const columns = groups[0].querySelectorAll('vaadin-grid-column');
+      const columns = groups[0].querySelectorAll('vaadin24-grid-column');
 
       groups[0].insertBefore(columns[1], columns[0]);
       await nextFrame();
@@ -603,10 +603,10 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
-        <vaadin-grid-column width="50px" flex-grow="0" header="1"></vaadin-grid-column>
-        <vaadin-grid-column width="100px" flex-grow="0" header="2"></vaadin-grid-column>
-      </vaadin-grid>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+        <vaadin24-grid-column width="50px" flex-grow="0" header="1"></vaadin24-grid-column>
+        <vaadin24-grid-column width="100px" flex-grow="0" header="2"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
     grid.dataProvider = infiniteDataProvider;
     flushGrid(grid);
@@ -633,20 +633,20 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
-        <vaadin-grid-column-group>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+        <vaadin24-grid-column-group>
           ${[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((col) => {
             return `
-              <vaadin-grid-column width="10px" header="${col}" footer="${col}" prefix="${col}"></vaadin-grid-column>
+              <vaadin24-grid-column width="10px" header="${col}" footer="${col}" prefix="${col}"></vaadin24-grid-column>
             `;
           })}
-        </vaadin-grid-column-group>
+        </vaadin24-grid-column-group>
 
-        <vaadin-grid-column width="10px" header="12" footer="12" prefix="12"></vaadin-grid-column>
-      </vaadin-grid>
+        <vaadin24-grid-column width="10px" header="12" footer="12" prefix="12"></vaadin24-grid-column>
+      </vaadin24-grid>
     `);
 
-    grid.querySelectorAll('vaadin-grid-column').forEach((col) => {
+    grid.querySelectorAll('vaadin24-grid-column').forEach((col) => {
       col.renderer = attributeRenderer('prefix');
       col.footerRenderer = attributeRenderer('footer');
     });
@@ -666,16 +666,16 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
         ${[1, 2].map((col) => {
           return `
-            <vaadin-grid-column resizable index=${col}></vaadin-grid-column>
+            <vaadin24-grid-column resizable index=${col}></vaadin24-grid-column>
           `;
         })}
-      </vaadin-grid>
+      </vaadin24-grid>
     `);
 
-    grid.querySelectorAll('vaadin-grid-column').forEach((col) => {
+    grid.querySelectorAll('vaadin24-grid-column').forEach((col) => {
       const renderer = (root) => {
         root.innerHTML = `<div draggable="true">${col.getAttribute('index')}</div>`;
       };
@@ -720,17 +720,17 @@
 
   beforeEach(async () => {
     grid = fixtureSync(`
-      <vaadin-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
-        <vaadin-grid-column-group>
-          <vaadin-grid-column header="1" footer="1" prefix="1"></vaadin-grid-column>
-        </vaadin-grid-column-group>
+      <vaadin24-grid style="width: 400px; height: 200px;" size="1" column-reordering-allowed>
+        <vaadin24-grid-column-group>
+          <vaadin24-grid-column header="1" footer="1" prefix="1"></vaadin24-grid-column>
+        </vaadin24-grid-column-group>
 
-        <vaadin-grid-column header="2" footer="2" prefix="2"></vaadin-grid-column>
-        </vaadin-grid-column>
-      </vaadin-grid>
+        <vaadin24-grid-column header="2" footer="2" prefix="2"></vaadin24-grid-column>
+        </vaadin24-grid-column>
+      </vaadin24-grid>
     `);
 
-    grid.querySelectorAll('vaadin-grid-column').forEach((col) => {
+    grid.querySelectorAll('vaadin24-grid-column').forEach((col) => {
       col.renderer = attributeRenderer('prefix');
       col.footerRenderer = attributeRenderer('footer');
     });
