Index: web-types.json
===================================================================
--- web-types.json
+++ web-types.json
@@ -1,14 +1,14 @@
 {
   "$schema": "https://json.schemastore.org/web-types",
-  "name": "@vaadin/combo-box",
-  "version": "23.4.0",
+  "name": "@scoped-vaadin/combo-box",
+  "version": "23.0.1",
   "description-markup": "markdown",
   "contributions": {
     "html": {
       "elements": [
         {
-          "name": "vaadin-combo-box-light",
-          "description": "`<vaadin-combo-box-light>` is a customizable version of the `<vaadin-combo-box>` providing\nonly the dropdown functionality and leaving the input field definition to the user.\n\nThe element has the same API as `<vaadin-combo-box>`.\n\nTo create a custom input field, you need to add a child element which has a two-way\ndata-bindable property representing the input value. The property name is expected\nto be `value` by default. For example, you can use `<vaadin-text-field>` element:\n\n```html\n<vaadin-combo-box-light>\n  <vaadin-text-field></vaadin-text-field>\n</vaadin-combo-box-light>\n```\n\nIf you are using custom input field that has other property for value,\nset `class=\"input\"` to enable corresponding logic, and use `attr-for-value`\nattribute to specify which property to use:\n\n```html\n<vaadin-combo-box-light attr-for-value=\"input-value\">\n  <custom-input class=\"input\"></custom-input>\n</vaadin-combo-box-light>\n```\n\nYou can also pass custom toggle and clear buttons with corresponding classes:\n\n```html\n<vaadin-combo-box-light>\n  <custom-input class=\"input\" attr-for-value=\"input-value\">\n    <button slot=\"suffix\" class=\"clear-button\">Clear</button>\n    <button slot=\"suffix\" class=\"toggle-button\">Toggle</button>\n  </custom-input>\n</vaadin-combo-box-light>\n```",
+          "name": "vaadin23-combo-box-light",
+          "description": "`<vaadin23-combo-box-light>` is a customizable version of the `<vaadin23-combo-box>` providing\nonly the dropdown functionality and leaving the input field definition to the user.\n\nThe element has the same API as `<vaadin23-combo-box>`.\n\nTo create a custom input field, you need to add a child element which has a two-way\ndata-bindable property representing the input value. The property name is expected\nto be `value` by default. For example, you can use `<vaadin23-text-field>` element:\n\n```html\n<vaadin23-combo-box-light>\n  <vaadin23-text-field></vaadin23-text-field>\n</vaadin23-combo-box-light>\n```\n\nIf you are using custom input field that has other property for value,\nset `class=\"input\"` to enable corresponding logic, and use `attr-for-value`\nattribute to specify which property to use:\n\n```html\n<vaadin23-combo-box-light attr-for-value=\"input-value\">\n  <custom-input class=\"input\"></custom-input>\n</vaadin23-combo-box-light>\n```\n\nYou can also pass custom toggle and clear buttons with corresponding classes:\n\n```html\n<vaadin23-combo-box-light>\n  <custom-input class=\"input\" attr-for-value=\"input-value\">\n    <button slot=\"suffix\" class=\"clear-button\">Clear</button>\n    <button slot=\"suffix\" class=\"toggle-button\">Toggle</button>\n  </custom-input>\n</vaadin23-combo-box-light>\n```",
           "attributes": [
             {
               "name": "page-size",
@@ -219,7 +219,7 @@
               },
               {
                 "name": "renderer",
-                "description": "Custom function for rendering the content of every item.\nReceives three arguments:\n\n- `root` The `<vaadin-combo-box-item>` internal container DOM element.\n- `comboBox` The reference to the `<vaadin-combo-box>` element.\n- `model` The object with the properties related with the rendered\n  item, contains:\n  - `model.index` The index of the rendered item.\n  - `model.item` The item.",
+                "description": "Custom function for rendering the content of every item.\nReceives three arguments:\n\n- `root` The `<vaadin23-combo-box-item>` internal container DOM element.\n- `comboBox` The reference to the `<vaadin23-combo-box>` element.\n- `model` The object with the properties related with the rendered\n  item, contains:\n  - `model.index` The index of the rendered item.\n  - `model.item` The item.",
                 "value": {
                   "type": [
                     "ComboBoxRenderer",
@@ -363,11 +363,11 @@
               },
               {
                 "name": "vaadin-combo-box-dropdown-closed",
-                "description": "Fired after the `vaadin-combo-box-overlay` closes."
+                "description": "Fired after the `vaadin23-combo-box-overlay` closes."
               },
               {
                 "name": "vaadin-combo-box-dropdown-opened",
-                "description": "Fired after the `vaadin-combo-box-overlay` opens."
+                "description": "Fired after the `vaadin23-combo-box-overlay` opens."
               },
               {
                 "name": "value-changed",
@@ -393,8 +393,8 @@
           }
         },
         {
-          "name": "vaadin-combo-box",
-          "description": "`<vaadin-combo-box>` is a web component for choosing a value from a filterable list of options\npresented in a dropdown overlay. The options can be provided as a list of strings or objects\nby setting [`items`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box#property-items) property on the element.\n\n```html\n<vaadin-combo-box id=\"combo-box\"></vaadin-combo-box>\n```\n```js\ndocument.querySelector('#combo-box').items = ['apple', 'orange', 'banana'];\n```\n\nWhen the selected `value` is changed, a `value-changed` event is triggered.\n\n### Item rendering\n\nTo customize the content of the `<vaadin-combo-box-item>` elements placed in the dropdown, use\n[`renderer`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box#property-renderer) property which accepts a function.\nThe renderer function is called with `root`, `comboBox`, and `model` as arguments.\n\nGenerate DOM content by using `model` object properties if needed, and append it to the `root`\nelement. The `comboBox` reference is provided to access the combo-box element state. Do not\nset combo-box properties in a `renderer` function.\n\n```js\nconst comboBox = document.querySelector('#combo-box');\ncomboBox.items = [{'label': 'Hydrogen', 'value': 'H'}];\ncomboBox.renderer = (root, comboBox, model) => {\n  const item = model.item;\n  root.innerHTML = `${model.index}: ${item.label} <b>${item.value}</b>`;\n};\n```\n\nRenderer is called on the opening of the combo-box and each time the related model is updated.\nBefore creating new content, it is recommended to check if there is already an existing DOM\nelement in `root` from a previous renderer call for reusing it. Even though combo-box uses\ninfinite scrolling, reducing DOM operations might improve performance.\n\nThe following properties are available in the `model` argument:\n\nProperty   | Type             | Description\n-----------|------------------|-------------\n`index`    | Number           | Index of the item in the `items` array\n`item`     | String or Object | The item reference\n`selected` | Boolean          | True when item is selected\n`focused`  | Boolean          | True when item is focused\n\n### Lazy Loading with Function Data Provider\n\nIn addition to assigning an array to the items property, you can alternatively use the\n[`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box#property-dataProvider) function property.\nThe `<vaadin-combo-box>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```js\ncomboBox.dataProvider = async (params, callback) => {\n  const API = 'https://demo.vaadin.com/demo-data/1.0/filtered-countries';\n  const { filter, page, pageSize } = params;\n  const index = page * pageSize;\n\n  const res = await fetch(`${API}?index=${index}&count=${pageSize}&filter=${filter}`);\n  if (res.ok) {\n    const { result, size } = await res.json();\n    callback(result, size);\n  }\n};\n```\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property                         | Description                | Default\n----------------------------------------|----------------------------|---------\n`--vaadin-field-default-width`          | Default width of the field | `12em`\n`--vaadin-combo-box-overlay-width`      | Width of the overlay       | `auto`\n`--vaadin-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\n\n`<vaadin-combo-box>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\nSee [`<vaadin-text-field>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-text-field) for the styling documentation.\n\nIn addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n\nPart name       | Description\n----------------|----------------\n`toggle-button` | The toggle button\n\nIn addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n\nAttribute | Description | Part name\n----------|-------------|------------\n`opened`  | Set when the combo box dropdown is open | :host\n`loading` | Set when new items are expected | :host\n\nIf you want to replace the default `<input>` and its container with a custom implementation to get full control\nover the input field, consider using the [`<vaadin-combo-box-light>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box-light) element.\n\n### Internal components\n\nIn addition to `<vaadin-combo-box>` itself, the following internal\ncomponents are themable:\n\n- `<vaadin-combo-box-overlay>` - has the same API as [`<vaadin-overlay>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-overlay).\n- `<vaadin-combo-box-item>` - has the same API as [`<vaadin-item>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-item).\n- [`<vaadin-input-container>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-input-container) - an internal element wrapping the input.\n\nNote: the `theme` attribute value set on `<vaadin-combo-box>` is\npropagated to the internal components listed above.\n\nSee [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.",
+          "name": "vaadin23-combo-box",
+          "description": "`<vaadin23-combo-box>` is a web component for choosing a value from a filterable list of options\npresented in a dropdown overlay. The options can be provided as a list of strings or objects\nby setting [`items`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box#property-items) property on the element.\n\n```html\n<vaadin23-combo-box id=\"combo-box\"></vaadin23-combo-box>\n```\n```js\ndocument.querySelector('#combo-box').items = ['apple', 'orange', 'banana'];\n```\n\nWhen the selected `value` is changed, a `value-changed` event is triggered.\n\n### Item rendering\n\nTo customize the content of the `<vaadin23-combo-box-item>` elements placed in the dropdown, use\n[`renderer`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box#property-renderer) property which accepts a function.\nThe renderer function is called with `root`, `comboBox`, and `model` as arguments.\n\nGenerate DOM content by using `model` object properties if needed, and append it to the `root`\nelement. The `comboBox` reference is provided to access the combo-box element state. Do not\nset combo-box properties in a `renderer` function.\n\n```js\nconst comboBox = document.querySelector('#combo-box');\ncomboBox.items = [{'label': 'Hydrogen', 'value': 'H'}];\ncomboBox.renderer = (root, comboBox, model) => {\n  const item = model.item;\n  root.innerHTML = `${model.index}: ${item.label} <b>${item.value}</b>`;\n};\n```\n\nRenderer is called on the opening of the combo-box and each time the related model is updated.\nBefore creating new content, it is recommended to check if there is already an existing DOM\nelement in `root` from a previous renderer call for reusing it. Even though combo-box uses\ninfinite scrolling, reducing DOM operations might improve performance.\n\nThe following properties are available in the `model` argument:\n\nProperty   | Type             | Description\n-----------|------------------|-------------\n`index`    | Number           | Index of the item in the `items` array\n`item`     | String or Object | The item reference\n`selected` | Boolean          | True when item is selected\n`focused`  | Boolean          | True when item is focused\n\n### Lazy Loading with Function Data Provider\n\nIn addition to assigning an array to the items property, you can alternatively use the\n[`dataProvider`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box#property-dataProvider) function property.\nThe `<vaadin23-combo-box>` calls this function lazily, only when it needs more data\nto be displayed.\n\n__Note that when using function data providers, the total number of items\nneeds to be set manually. The total number of items can be returned\nin the second argument of the data provider callback:__\n\n```js\ncomboBox.dataProvider = async (params, callback) => {\n  const API = 'https://demo.vaadin.com/demo-data/1.0/filtered-countries';\n  const { filter, page, pageSize } = params;\n  const index = page * pageSize;\n\n  const res = await fetch(`${API}?index=${index}&count=${pageSize}&filter=${filter}`);\n  if (res.ok) {\n    const { result, size } = await res.json();\n    callback(result, size);\n  }\n};\n```\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property                         | Description                | Default\n----------------------------------------|----------------------------|---------\n`--vaadin-field-default-width`          | Default width of the field | `12em`\n`--vaadin-combo-box-overlay-width`      | Width of the overlay       | `auto`\n`--vaadin-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\n\n`<vaadin23-combo-box>` provides the same set of shadow DOM parts and state attributes as `<vaadin23-text-field>`.\nSee [`<vaadin23-text-field>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-text-field) for the styling documentation.\n\nIn addition to `<vaadin23-text-field>` parts, the following parts are available for theming:\n\nPart name       | Description\n----------------|----------------\n`toggle-button` | The toggle button\n\nIn addition to `<vaadin23-text-field>` state attributes, the following state attributes are available for theming:\n\nAttribute | Description | Part name\n----------|-------------|------------\n`opened`  | Set when the combo box dropdown is open | :host\n`loading` | Set when new items are expected | :host\n\nIf you want to replace the default `<input>` and its container with a custom implementation to get full control\nover the input field, consider using the [`<vaadin23-combo-box-light>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-combo-box-light) element.\n\n### Internal components\n\nIn addition to `<vaadin23-combo-box>` itself, the following internal\ncomponents are themable:\n\n- `<vaadin23-combo-box-overlay>` - has the same API as [`<vaadin23-overlay>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-overlay).\n- `<vaadin23-combo-box-item>` - has the same API as [`<vaadin23-item>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-item).\n- [`<vaadin23-input-container>`](https://cdn.vaadin.com/vaadin-web-components/23.4.0/#/elements/vaadin-input-container) - an internal element wrapping the input.\n\nNote: the `theme` attribute value set on `<vaadin23-combo-box>` is\npropagated to the internal components listed above.\n\nSee [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.",
           "attributes": [
             {
               "name": "disabled",
@@ -926,7 +926,7 @@
               },
               {
                 "name": "renderer",
-                "description": "Custom function for rendering the content of every item.\nReceives three arguments:\n\n- `root` The `<vaadin-combo-box-item>` internal container DOM element.\n- `comboBox` The reference to the `<vaadin-combo-box>` element.\n- `model` The object with the properties related with the rendered\n  item, contains:\n  - `model.index` The index of the rendered item.\n  - `model.item` The item.",
+                "description": "Custom function for rendering the content of every item.\nReceives three arguments:\n\n- `root` The `<vaadin23-combo-box-item>` internal container DOM element.\n- `comboBox` The reference to the `<vaadin23-combo-box>` element.\n- `model` The object with the properties related with the rendered\n  item, contains:\n  - `model.index` The index of the rendered item.\n  - `model.item` The item.",
                 "value": {
                   "type": [
                     "ComboBoxRenderer",
@@ -1047,11 +1047,11 @@
               },
               {
                 "name": "vaadin-combo-box-dropdown-closed",
-                "description": "Fired after the `vaadin-combo-box-overlay` closes."
+                "description": "Fired after the `vaadin23-combo-box-overlay` closes."
               },
               {
                 "name": "vaadin-combo-box-dropdown-opened",
-                "description": "Fired after the `vaadin-combo-box-overlay` opens."
+                "description": "Fired after the `vaadin23-combo-box-overlay` opens."
               },
               {
                 "name": "value-changed",
