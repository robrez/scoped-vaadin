Index: src/vaadin-combo-box-light.js
===================================================================
--- src/vaadin-combo-box-light.js
+++ src/vaadin-combo-box-light.js
@@ -7,24 +7,24 @@
 import './vaadin-combo-box-overlay.js';
 import './vaadin-combo-box-scroller.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
-import { defineCustomElement } from '@vaadin/component-base/src/define.js';
-import { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
+import { defineCustomElement } from '@scoped-vaadin/component-base/src/define.js';
+import { ThemableMixin } from '@scoped-vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
 import { ComboBoxLightMixin } from './vaadin-combo-box-light-mixin.js';
 
 /**
- * `<vaadin-combo-box-light>` is a customizable version of the `<vaadin-combo-box>` providing
+ * `<vaadin24-combo-box-light>` is a customizable version of the `<vaadin24-combo-box>` providing
  * only the dropdown functionality and leaving the input field definition to the user.
  *
- * The element has the same API as `<vaadin-combo-box>`.
+ * The element has the same API as `<vaadin24-combo-box>`.
  *
  * To create a custom input field, you need to add a child element which has a two-way
  * data-bindable property representing the input value. The property name is expected
- * to be `value` by default. For example, you can use `<vaadin-text-field>` element:
+ * to be `value` by default. For example, you can use `<vaadin24-text-field>` element:
  *
  * ```html
- * <vaadin-combo-box-light>
- *   <vaadin-text-field></vaadin-text-field>
- * </vaadin-combo-box-light>
+ * <vaadin24-combo-box-light>
+ *   <vaadin24-text-field></vaadin24-text-field>
+ * </vaadin24-combo-box-light>
  * ```
  *
  * If you are using custom input field that has other property for value,
@@ -32,20 +32,20 @@
  * attribute to specify which property to use:
  *
  * ```html
- * <vaadin-combo-box-light attr-for-value="input-value">
+ * <vaadin24-combo-box-light attr-for-value="input-value">
  *   <custom-input class="input"></custom-input>
- * </vaadin-combo-box-light>
+ * </vaadin24-combo-box-light>
  * ```
  *
  * You can also pass custom toggle and clear buttons with corresponding classes:
  *
  * ```html
- * <vaadin-combo-box-light>
+ * <vaadin24-combo-box-light>
  *   <custom-input class="input" attr-for-value="input-value">
  *     <button slot="suffix" class="clear-button">Clear</button>
  *     <button slot="suffix" class="toggle-button">Toggle</button>
  *   </custom-input>
- * </vaadin-combo-box-light>
+ * </vaadin24-combo-box-light>
  * ```
  *
  * @fires {Event} change - Fired when the user commits a value change.
@@ -64,7 +64,7 @@
  */
 class ComboBoxLight extends ComboBoxLightMixin(ThemableMixin(PolymerElement)) {
   static get is() {
-    return 'vaadin-combo-box-light';
+    return 'vaadin24-combo-box-light';
   }
 
   static get template() {
@@ -77,14 +77,14 @@
 
       <slot></slot>
 
-      <vaadin-combo-box-overlay
+      <vaadin24-combo-box-overlay
         id="overlay"
         opened="[[_overlayOpened]]"
         loading$="[[loading]]"
         theme$="[[_theme]]"
         position-target="[[inputElement]]"
         no-vertical-overlap
-      ></vaadin-combo-box-overlay>
+      ></vaadin24-combo-box-overlay>
     `;
   }
 }
