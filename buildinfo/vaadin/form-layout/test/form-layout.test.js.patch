Index: test/form-layout.test.js
===================================================================
--- test/form-layout.test.js
+++ test/form-layout.test.js
@@ -1,8 +1,9 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { aTimeout, fixtureSync, nextRender } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
 import '@polymer/polymer/lib/elements/dom-repeat.js';
-import '@vaadin/text-field/vaadin-text-field.js';
+import '@scoped-vaadin/text-field/vaadin-text-field.js';
 import '../vaadin-form-layout.js';
 import '../vaadin-form-item.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
@@ -27,27 +28,27 @@
   await onceInvoked(layout, '_updateLayout');
 }
 
-customElements.define(
+internalCustomElements.define(
   'mutable-layout',
   class extends PolymerElement {
     static get template() {
       return html`
-        <vaadin-form-layout>
-          <vaadin-form-item>
+        <vaadin24-form-layout>
+          <vaadin24-form-item>
             <label slot="label">Address</label>
             <input class="full-width" />
-          </vaadin-form-item>
-          <vaadin-form-item>
+          </vaadin24-form-item>
+          <vaadin24-form-item>
             <label slot="label">First Name</label>
             <input class="full-width" value="Jane" />
-          </vaadin-form-item>
+          </vaadin24-form-item>
           <template is="dom-repeat" items="[[items]]">
-            <vaadin-form-item colspan$="[[item.colspan]]">
+            <vaadin24-form-item colspan$="[[item.colspan]]">
               <label slot="label">[[item.label]]</label>
               <input class="full-width" />
-            </vaadin-form-item>
+            </vaadin24-form-item>
           </template>
-        </vaadin-form-layout>
+        </vaadin24-form-layout>
       `;
     }
 
@@ -75,10 +76,10 @@
 
     beforeEach(() => {
       layout = fixtureSync(`
-        <vaadin-form-layout>
-          <vaadin-text-field></vaadin-text-field>
-          <vaadin-form-item></vaadin-form-item>
-        </vaadin-form-layout>
+        <vaadin24-form-layout>
+          <vaadin24-text-field></vaadin24-text-field>
+          <vaadin24-form-item></vaadin24-form-item>
+        </vaadin24-form-layout>
       `);
     });
 
@@ -94,7 +95,7 @@
     });
 
     it('should distribute vaadin-text-field', () => {
-      const textField = layout.querySelector('vaadin-text-field');
+      const textField = layout.querySelector('vaadin24-text-field');
       const slot = layout.shadowRoot.querySelector('slot');
       expect(textField).to.be.ok;
       expect(slot.assignedNodes()).to.contain(textField);
@@ -106,12 +107,12 @@
 
     beforeEach(() => {
       layout = fixtureSync(`
-        <vaadin-form-layout>
-          <vaadin-text-field></vaadin-text-field>
-          <vaadin-form-item></vaadin-form-item>
-        </vaadin-form-layout>
+        <vaadin24-form-layout>
+          <vaadin24-text-field></vaadin24-text-field>
+          <vaadin24-form-item></vaadin24-form-item>
+        </vaadin24-form-layout>
       `);
-      item = layout.querySelector('vaadin-form-item');
+      item = layout.querySelector('vaadin24-form-item');
     });
 
     it('should have default label-width', () => {
@@ -162,14 +163,14 @@
 
     beforeEach(() => {
       layout = fixtureSync(`
-        <vaadin-form-layout responsive-steps='[{"columns": 3}]'>
-          <vaadin-text-field></vaadin-text-field>
-          <vaadin-text-field colspan="1"></vaadin-text-field>
-          <vaadin-text-field colspan="2"></vaadin-text-field>
-          <vaadin-text-field colspan="3"></vaadin-text-field>
-          <vaadin-text-field colspan="4"></vaadin-text-field>
-          <vaadin-text-field colspan="non-number"></vaadin-text-field>
-        </vaadin-form-layout>
+        <vaadin24-form-layout responsive-steps='[{"columns": 3}]'>
+          <vaadin24-text-field></vaadin24-text-field>
+          <vaadin24-text-field colspan="1"></vaadin24-text-field>
+          <vaadin24-text-field colspan="2"></vaadin24-text-field>
+          <vaadin24-text-field colspan="3"></vaadin24-text-field>
+          <vaadin24-text-field colspan="4"></vaadin24-text-field>
+          <vaadin24-text-field colspan="non-number"></vaadin24-text-field>
+        </vaadin24-form-layout>
       `);
     });
 
@@ -200,7 +201,7 @@
     beforeEach(() => {
       container = fixtureSync(`
       <div style="width: 300px; overflow: auto;">
-          <vaadin-form-layout responsive-steps='[{"columns": 3}]'>
+          <vaadin24-form-layout responsive-steps='[{"columns": 3}]'>
             <div at-start>1 start</div>
             <div>2 mid</div>
             <div at-end>3 end</div>
@@ -214,7 +215,7 @@
             <div colspan="2" at-start>7 start</div>
             <div at-end>8 end</div>
             <div colspan="3" at-start at-end>9 start to end</div>
-          </vaadin-form-layout>
+          </vaadin24-form-layout>
         </div>
       `);
       layout = container.firstElementChild;
@@ -273,11 +274,11 @@
 
     beforeEach(async () => {
       layout = fixtureSync(`
-        <vaadin-form-layout>
-          <vaadin-text-field></vaadin-text-field>
-          <vaadin-text-field></vaadin-text-field>
-          <vaadin-form-item></vaadin-form-item>
-        </vaadin-form-layout>
+        <vaadin24-form-layout>
+          <vaadin24-text-field></vaadin24-text-field>
+          <vaadin24-text-field></vaadin24-text-field>
+          <vaadin24-form-item></vaadin24-form-item>
+        </vaadin24-form-layout>
       `);
       await aTimeout(100);
     });
@@ -314,7 +315,7 @@
 
     describe('custom label-position', () => {
       beforeEach(async () => {
-        const item = document.createElement('vaadin-form-item');
+        const item = document.createElement('vaadin24-form-item');
         item.setAttribute('label-position', 'top');
         layout.insertBefore(item, layout.lastElementChild);
         await nextRender();
@@ -496,14 +497,14 @@
       container = fixtureSync(`
         <div style="display: flex;">
           <div>Foo</div>
-          <vaadin-form-layout>
-            <vaadin-text-field></vaadin-text-field>
+          <vaadin24-form-layout>
+            <vaadin24-text-field></vaadin24-text-field>
             <br>
-            <vaadin-text-field></vaadin-text-field>
-          </vaadin-form-layout>
+            <vaadin24-text-field></vaadin24-text-field>
+          </vaadin24-form-layout>
         </div>
       `);
-      layout = container.querySelector('vaadin-form-layout');
+      layout = container.querySelector('vaadin24-form-layout');
     });
 
     it('should have less width than then flexbox', () => {
@@ -519,10 +520,10 @@
     beforeEach(() => {
       container = fixtureSync(`
         <div hidden>
-          <vaadin-form-layout></vaadin-form-layout>
+          <vaadin24-form-layout></vaadin24-form-layout>
         </div>
       `);
-      layout = container.querySelector('vaadin-form-layout');
+      layout = container.querySelector('vaadin24-form-layout');
     });
 
     it('should update steps on show after hidden', (done) => {
@@ -553,7 +554,7 @@
 
     beforeEach(async () => {
       container = fixtureSync('<mutable-layout></mutable-layout>');
-      layout = container.shadowRoot.querySelector('vaadin-form-layout');
+      layout = container.shadowRoot.querySelector('vaadin24-form-layout');
       await nextRender(container);
     });
 
@@ -588,7 +589,7 @@
       const itemWidth = layout.children[0].getBoundingClientRect().width;
       expect(itemWidth).to.be.above(0);
 
-      const newFormItem = document.createElement('vaadin-form-item');
+      const newFormItem = document.createElement('vaadin24-form-item');
       newFormItem.hidden = true;
       layout.appendChild(newFormItem);
       await nextRender(container);
@@ -603,7 +604,7 @@
     it('should update layout after updating a colspan attribute on the lazily stamped node', async () => {
       container.push('items', { label: 'Email', colspan: 1 });
       await nextRender(container);
-      const item = layout.querySelectorAll('vaadin-form-item')[2];
+      const item = layout.querySelectorAll('vaadin24-form-item')[2];
       expect(estimateEffectiveColspan(item)).to.be.closeTo(1, 0.1);
 
       container.set('items.0.colspan', 2);
@@ -612,7 +613,7 @@
     });
 
     it('should update layout after a new item is added', async () => {
-      const newFormItem = document.createElement('vaadin-form-item');
+      const newFormItem = document.createElement('vaadin24-form-item');
       newFormItem.innerHTML = '<label slot="label">Age</label><input class="full-width">';
       layout.appendChild(newFormItem);
       await nextRender(container);
@@ -620,7 +621,7 @@
     });
 
     it('should update layout after an item is removed', async () => {
-      const itemsList = layout.querySelectorAll('vaadin-form-item');
+      const itemsList = layout.querySelectorAll('vaadin24-form-item');
       expect(getComputedStyle(itemsList[1]).marginLeft).to.not.be.equal('0px');
 
       layout.removeChild(itemsList[0]);
