Index: test/tabs.test.js
===================================================================
--- test/tabs.test.js
+++ test/tabs.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { arrowRight, aTimeout, enter, fixtureSync, listenOnce, nextFrame, space } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
@@ -28,15 +29,15 @@
 
   beforeEach(() => {
     tabs = fixtureSync(`
-      <vaadin-tabs>
-        <vaadin-tab>Foo</vaadin-tab>
-        <vaadin-tab>Bar</vaadin-tab>
+      <vaadin23-tabs>
+        <vaadin23-tab>Foo</vaadin23-tab>
+        <vaadin23-tab>Bar</vaadin23-tab>
         <span></span>
-        <vaadin-tab disabled>Baz</vaadin-tab>
-        <vaadin-tab>
+        <vaadin23-tab disabled>Baz</vaadin23-tab>
+        <vaadin23-tab>
           <a>Baz</a>
-        </vaadin-tab>
-      </vaadin-tabs>
+        </vaadin23-tab>
+      </vaadin23-tabs>
     `);
     tabs._observer.flush();
   });
@@ -49,11 +50,11 @@
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -61,7 +62,7 @@
     it('should only add vaadin-tab components to items', () => {
       expect(tabs.items.length).to.equal(4);
       tabs.items.forEach((item) => {
-        expect(item.tagName.toLowerCase()).to.equal('vaadin-tab');
+        expect(item.tagName.toLowerCase()).to.equal('vaadin23-tab');
       });
     });
 
@@ -226,13 +227,13 @@
   beforeEach(() => {
     wrapper = fixtureSync(`
       <div style="display: flex; width: 400px;">
-        <vaadin-tabs>
-          <vaadin-tab>Foo</vaadin-tab>
-          <vaadin-tab>Bar</vaadin-tab>
-        </vaadin-tabs>
+        <vaadin23-tabs>
+          <vaadin23-tab>Foo</vaadin23-tab>
+          <vaadin23-tab>Bar</vaadin23-tab>
+        </vaadin23-tabs>
       </div>
     `);
-    tabs = wrapper.querySelector('vaadin-tabs');
+    tabs = wrapper.querySelector('vaadin23-tabs');
   });
 
   it('should have width above zero', () => {
@@ -250,14 +251,14 @@
   beforeEach(() => {
     wrapper = fixtureSync(`
       <div style="display: flex; justify-content: center; width: 400px;">
-        <vaadin-tabs theme="equal-width-tabs">
-          <vaadin-tab>Tab one</vaadin-tab>
-          <vaadin-tab>Tab two with a longer title</vaadin-tab>
-          <vaadin-tab>Tab three</vaadin-tab>
-        </vaadin-tabs>
+        <vaadin23-tabs theme="equal-width-tabs">
+          <vaadin23-tab>Tab one</vaadin23-tab>
+          <vaadin23-tab>Tab two with a longer title</vaadin23-tab>
+          <vaadin23-tab>Tab three</vaadin23-tab>
+        </vaadin23-tabs>
       </div>
     `);
-    tabs = wrapper.querySelector('vaadin-tabs');
+    tabs = wrapper.querySelector('vaadin23-tabs');
     tabs._observer.flush();
   });
 
