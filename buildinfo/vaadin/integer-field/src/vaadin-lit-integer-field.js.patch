Index: src/vaadin-lit-integer-field.js
===================================================================
--- src/vaadin-lit-integer-field.js
+++ src/vaadin-lit-integer-field.js
@@ -3,11 +3,11 @@
  * Copyright (c) 2021 - 2025 Vaadin Ltd.
  * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */
-import { defineCustomElement } from '@vaadin/component-base/src/define.js';
-import { NumberField } from '@vaadin/number-field/src/vaadin-lit-number-field.js';
+import { defineCustomElement } from '@scoped-vaadin/component-base/src/define.js';
+import { NumberField } from '@scoped-vaadin/number-field/src/vaadin-lit-number-field.js';
 
 /**
- * LitElement based version of `<vaadin-integer-field>` web component.
+ * LitElement based version of `<vaadin24-integer-field>` web component.
  *
  * ## Disclaimer
  *
@@ -17,7 +17,7 @@
  */
 export class IntegerField extends NumberField {
   static get is() {
-    return 'vaadin-integer-field';
+    return 'vaadin24-integer-field';
   }
 
   constructor() {
@@ -36,7 +36,7 @@
    */
   _valueChanged(newVal, oldVal) {
     if (newVal !== '' && !this.__isInteger(newVal)) {
-      console.warn(`Trying to set non-integer value "${newVal}" to <vaadin-integer-field>. Clearing the value.`);
+      console.warn(`Trying to set non-integer value "${newVal}" to <vaadin24-integer-field>. Clearing the value.`);
       this.value = '';
       return;
     }
@@ -54,7 +54,7 @@
   _stepChanged(step, inputElement) {
     if (step != null && !this.__hasOnlyDigits(step)) {
       console.warn(
-        `<vaadin-integer-field> The \`step\` property must be a positive integer but \`${step}\` was provided, so the property was reset to \`null\`.`,
+        `<vaadin24-integer-field> The \`step\` property must be a positive integer but \`${step}\` was provided, so the property was reset to \`null\`.`,
       );
       this.step = null;
       return;
