Index: src/vaadin-split-layout.js
===================================================================
--- src/vaadin-split-layout.js
+++ src/vaadin-split-layout.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 /**
  * @license
  * Copyright (c) 2016 - 2022 Vaadin Ltd.
@@ -5,19 +6,19 @@
  */
 import { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
-import { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';
-import { addListener } from '@vaadin/component-base/src/gestures.js';
-import { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
+import { ElementMixin } from '@scoped-vaadin/component-base/src/element-mixin.js';
+import { addListener } from '@scoped-vaadin/component-base/src/gestures.js';
+import { ThemableMixin } from '@scoped-vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
 
 /**
- * `<vaadin-split-layout>` is a Web Component implementing a split layout for two
+ * `<vaadin23-split-layout>` is a Web Component implementing a split layout for two
  * content elements with a draggable splitter between them.
  *
  * ```html
- * <vaadin-split-layout>
+ * <vaadin23-split-layout>
  *   <div>First content element</div>
  *   <div>Second content element</div>
- * </vaadin-split-layout>
+ * </vaadin23-split-layout>
  * ```
  *
  * ### Horizontal and Vertical Layouts
@@ -28,10 +29,10 @@
  * You can change the split mode to vertical by setting the `orientation` attribute to `"vertical"`:
  *
  * ```html
- * <vaadin-split-layout orientation="vertical">
+ * <vaadin23-split-layout orientation="vertical">
  *   <div>Content on the top</div>
  *   <div>Content on the bottom</div>
- * </vaadin-split-layout>
+ * </vaadin23-split-layout>
  * ```
  *
  * ### Layouts Combination
@@ -40,17 +41,17 @@
  * although you can use any other elements as well.
  *
  * For instance, in order to have a nested vertical split layout inside a
- * horizontal one, you can include `<vaadin-split-layout>` as a content element
+ * horizontal one, you can include `<vaadin23-split-layout>` as a content element
  * inside another split layout:
  *
  * ```html
- * <vaadin-split-layout>
+ * <vaadin23-split-layout>
  *   <div>First content element</div>
- *   <vaadin-split-layout orientation="vertical">
+ *   <vaadin23-split-layout orientation="vertical">
  *     <div>Second content element</div>
  *     <div>Third content element</div>
- *   </vaadin-split-layout>
- * </vaadin-split-layout>
+ *   </vaadin23-split-layout>
+ * </vaadin23-split-layout>
  * ```
  *
  * You can also trigger the vertical mode in JavaScript by setting the property:
@@ -58,7 +59,7 @@
  *
  * ### Split Layout Element Height
  *
- * `<vaadin-split-layout>` element itself is a flex container. It does not inherit
+ * `<vaadin23-split-layout>` element itself is a flex container. It does not inherit
  * the parent height by default, but rather sets its height depending on the
  * content.
  *
@@ -66,35 +67,35 @@
  * block element:
  *
  * ```html
- * <vaadin-split-layout style="height: 200px;">
+ * <vaadin23-split-layout style="height: 200px;">
  *   <div>First content element</div>
  *   <div>Second content element</div>
- * </vaadin-split-layout>
+ * </vaadin23-split-layout>
  * ```
  *
  * It is possible to define percentage height as well. Note that you have to set
  * the parent height in order to make percentages work correctly. In the following
  * example, the `<body>` is resized to fill the entire viewport, and the
- * `<vaadin-split-layout>` element is set to take 100% height of the `<body>`:
+ * `<vaadin23-split-layout>` element is set to take 100% height of the `<body>`:
  *
  * ```html
  * <body style="height: 100vh; margin: 0;">
- *   <vaadin-split-layout style="height: 100%;">
+ *   <vaadin23-split-layout style="height: 100%;">
  *     <div>First</div>
  *     <div>Second</div>
- *   </vaadin-split-layout>
+ *   </vaadin23-split-layout>
  * </body>
  * ```
  *
- * Alternatively, you can use a flexbox layout to make `<vaadin-split-layout>`
+ * Alternatively, you can use a flexbox layout to make `<vaadin23-split-layout>`
  * fill up the parent:
  *
  * ```html
  * <body style="height: 100vh; margin: 0; display: flex;">
- *   <vaadin-split-layout style="flex: 1;">
+ *   <vaadin23-split-layout style="flex: 1;">
  *     <div>First</div>
  *     <div>Second</div>
- *   </vaadin-split-layout>
+ *   </vaadin23-split-layout>
  * </body>
  * ```
  *
@@ -112,10 +113,10 @@
  * recommended to assign the size for both content elements:
  *
  * ```html
- * <vaadin-split-layout>
+ * <vaadin23-split-layout>
  *   <div style="width: 75%;">Three fourths</div>
  *   <div style="width: 25%;">One fourth</div>
- * </vaadin-split-layout>
+ * </vaadin23-split-layout>
  * ```
  *
  * ### Size Limits
@@ -128,10 +129,10 @@
  * to avoid size conflicts:
  *
  * ```html
- * <vaadin-split-layout>
+ * <vaadin23-split-layout>
  *   <div style="min-width: 50px; max-width: 150px;">First</div>
  *   <div>Second</div>
- * </vaadin-split-layout>
+ * </vaadin23-split-layout>
  * ```
  *
  * ### Styling
@@ -210,7 +211,7 @@
   }
 
   static get is() {
-    return 'vaadin-split-layout';
+    return 'vaadin23-split-layout';
   }
 
   static get properties() {
@@ -372,6 +373,6 @@
    */
 }
 
-customElements.define(SplitLayout.is, SplitLayout);
+internalCustomElements.define(SplitLayout.is, SplitLayout);
 
 export { SplitLayout };
