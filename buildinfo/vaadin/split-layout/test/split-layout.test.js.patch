Index: test/split-layout.test.js
===================================================================
--- test/split-layout.test.js
+++ test/split-layout.test.js
@@ -10,10 +10,10 @@
 describe('split layout', () => {
   beforeEach(() => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin23-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin23-split-layout>
     `);
   });
 
@@ -78,10 +78,10 @@
     describe('elements with slot pre-defined', () => {
       it('should respect pre-defined slot values in both elements', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin23-split-layout>
             <div id="second" slot="secondary">secondary</div>
             <div id="first" slot="primary">primary</div>
-          </vaadin-split-layout>
+          </vaadin23-split-layout>
         `);
         await nextRender();
         expect(layout.querySelector('#first').slot).to.be.equal('primary');
@@ -90,10 +90,10 @@
 
       it('should assign a slot if only one element has "secondary" slot pre-defined', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin23-split-layout>
             <div id="second" slot="secondary">secondary</div>
             <div id="first">primary</div>
-          </vaadin-split-layout>
+          </vaadin23-split-layout>
         `);
         await nextRender();
         expect(layout.querySelector('#first').slot).to.be.equal('primary');
@@ -102,10 +102,10 @@
 
       it('should assign a slot if only element has "primary" slot pre-defined', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin23-split-layout>
             <div id="second">secondary</div>
             <div id="first" slot="primary">primary</div>
-          </vaadin-split-layout>
+          </vaadin23-split-layout>
         `);
         await nextRender();
         expect(layout.querySelector('#first').slot).to.be.equal('primary');
@@ -114,10 +114,10 @@
 
       it('should respect assigned slot if only one element has slot pre-defined after order is inverted', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin23-split-layout>
             <div id="second">secondary</div>
             <div id="first" slot="primary">primary</div>
-          </vaadin-split-layout>
+          </vaadin23-split-layout>
         `);
         await nextRender();
 
@@ -131,10 +131,10 @@
 
       it('should swap slots if children without pre-defined slots invert order', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin23-split-layout>
             <div id="second">secondary</div>
             <div id="first">primary</div>
-          </vaadin-split-layout>
+          </vaadin23-split-layout>
         `);
         await nextRender();
 
@@ -148,13 +148,13 @@
 
       it('should assign slots only for direct children', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin23-split-layout>
             <div id="first">primary</div>
-            <vaadin-split-layout id="second">
+            <vaadin23-split-layout id="second">
               <div id="nested-first" slot="primary"></div>
               <div id="nested-second" slot="secondary"></div>
-            </vaadin-split-layout>
-          </vaadin-split-layout>
+            </vaadin23-split-layout>
+          </vaadin23-split-layout>
         `);
         await nextRender();
 
@@ -356,10 +356,10 @@
 describe('horizontal mode', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin23-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin23-split-layout>
     `);
     splitLayout.style.width = `${initialSizes.width}px`;
     splitLayout.style.height = `${initialSizes.height}px`;
@@ -374,10 +374,10 @@
 describe('vertical mode', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin23-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin23-split-layout>
     `);
     splitLayout.style.width = `${initialSizes.width}px`;
     splitLayout.style.height = `${initialSizes.height}px`;
@@ -393,9 +393,9 @@
 describe('layout with one child', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin23-split-layout>
         <div id="first">some content</div>
-      </vaadin-split-layout>
+      </vaadin23-split-layout>
     `);
     await aTimeout(1);
     first = splitLayout.$.primary.assignedNodes({ flatten: true })[0];
@@ -416,10 +416,10 @@
 describe('removing nodes', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin23-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin23-split-layout>
     `);
     await aTimeout(0);
     first = splitLayout.$.primary.assignedNodes({ flatten: true })[0];
@@ -436,10 +436,10 @@
 describe('moving nodes between layouts', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin23-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin23-split-layout>
     `);
     await aTimeout(0);
     first = splitLayout.$.primary.assignedNodes({ flatten: true })[0];
@@ -448,7 +448,7 @@
 
   it('should not clear slot attribute when moving to a different split layout', async () => {
     const otherLayout = fixtureSync(`
-      <vaadin-split-layout></vaadin-split-layout>
+      <vaadin23-split-layout></vaadin23-split-layout>
     `);
     otherLayout.appendChild(second);
     otherLayout.appendChild(first);
