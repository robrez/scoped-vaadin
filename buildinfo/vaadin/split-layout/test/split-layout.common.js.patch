Index: test/split-layout.common.js
===================================================================
--- test/split-layout.common.js
+++ test/split-layout.common.js
@@ -9,10 +9,10 @@
 describe('split layout', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin24-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin24-split-layout>
     `);
     await nextRender();
   });
@@ -77,10 +77,10 @@
     describe('elements with slot pre-defined', () => {
       it('should respect pre-defined slot values in both elements', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin24-split-layout>
             <div id="second" slot="secondary">secondary</div>
             <div id="first" slot="primary">primary</div>
-          </vaadin-split-layout>
+          </vaadin24-split-layout>
         `);
         await nextRender();
         expect(layout.querySelector('#first').slot).to.be.equal('primary');
@@ -89,10 +89,10 @@
 
       it('should assign a slot if only one element has "secondary" slot pre-defined', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin24-split-layout>
             <div id="second" slot="secondary">secondary</div>
             <div id="first">primary</div>
-          </vaadin-split-layout>
+          </vaadin24-split-layout>
         `);
         await nextRender();
         expect(layout.querySelector('#first').slot).to.be.equal('primary');
@@ -101,10 +101,10 @@
 
       it('should assign a slot if only element has "primary" slot pre-defined', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin24-split-layout>
             <div id="second">secondary</div>
             <div id="first" slot="primary">primary</div>
-          </vaadin-split-layout>
+          </vaadin24-split-layout>
         `);
         await nextRender();
         expect(layout.querySelector('#first').slot).to.be.equal('primary');
@@ -113,10 +113,10 @@
 
       it('should respect assigned slot if only one element has slot pre-defined after order is inverted', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin24-split-layout>
             <div id="second">secondary</div>
             <div id="first" slot="primary">primary</div>
-          </vaadin-split-layout>
+          </vaadin24-split-layout>
         `);
         await nextRender();
 
@@ -130,10 +130,10 @@
 
       it('should swap slots if children without pre-defined slots invert order', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin24-split-layout>
             <div id="second">secondary</div>
             <div id="first">primary</div>
-          </vaadin-split-layout>
+          </vaadin24-split-layout>
         `);
         await nextRender();
 
@@ -147,13 +147,13 @@
 
       it('should assign slots only for direct children', async () => {
         const layout = fixtureSync(`
-          <vaadin-split-layout>
+          <vaadin24-split-layout>
             <div id="first">primary</div>
-            <vaadin-split-layout id="second">
+            <vaadin24-split-layout id="second">
               <div id="nested-first" slot="primary"></div>
               <div id="nested-second" slot="secondary"></div>
-            </vaadin-split-layout>
-          </vaadin-split-layout>
+            </vaadin24-split-layout>
+          </vaadin24-split-layout>
         `);
         await nextRender();
 
@@ -346,10 +346,10 @@
 describe('horizontal mode', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin24-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin24-split-layout>
     `);
     splitLayout.style.width = `${initialSizes.width}px`;
     splitLayout.style.height = `${initialSizes.height}px`;
@@ -364,10 +364,10 @@
 describe('vertical mode', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin24-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin24-split-layout>
     `);
     splitLayout.style.width = `${initialSizes.width}px`;
     splitLayout.style.height = `${initialSizes.height}px`;
@@ -383,9 +383,9 @@
 describe('layout with one child', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin24-split-layout>
         <div id="first">some content</div>
-      </vaadin-split-layout>
+      </vaadin24-split-layout>
     `);
     await aTimeout(1);
     first = splitLayout.$.primary.assignedNodes({ flatten: true })[0];
@@ -406,10 +406,10 @@
 describe('removing nodes', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin24-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin24-split-layout>
     `);
     await aTimeout(0);
     first = splitLayout.$.primary.assignedNodes({ flatten: true })[0];
@@ -426,10 +426,10 @@
 describe('moving nodes between layouts', () => {
   beforeEach(async () => {
     splitLayout = fixtureSync(`
-      <vaadin-split-layout>
+      <vaadin24-split-layout>
         <div id="first">some content</div>
         <div id="second">some content</div>
-      </vaadin-split-layout>
+      </vaadin24-split-layout>
     `);
     await aTimeout(0);
     first = splitLayout.$.primary.assignedNodes({ flatten: true })[0];
@@ -438,7 +438,7 @@
 
   it('should not clear slot attribute when moving to a different split layout', async () => {
     const otherLayout = fixtureSync(`
-      <vaadin-split-layout></vaadin-split-layout>
+      <vaadin24-split-layout></vaadin24-split-layout>
     `);
     otherLayout.appendChild(second);
     otherLayout.appendChild(first);
