Index: test/dialog.test.js
===================================================================
--- test/dialog.test.js
+++ test/dialog.test.js
@@ -1,20 +1,21 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { esc, fixtureSync } from '@vaadin/testing-helpers';
-import '@vaadin/polymer-legacy-adapter/template-renderer.js';
+import '@scoped-vaadin/polymer-legacy-adapter/template-renderer.js';
 import '../vaadin-dialog.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
 
-customElements.define(
+internalCustomElements.define(
   'x-dialog',
   class XDialog extends PolymerElement {
     static get template() {
       return html`
-        <vaadin-dialog id="dialog">
+        <vaadin23-dialog id="dialog">
           <template>
             <span>[[message]]</span>
             <input value="{{text::input}}" />
           </template>
-        </vaadin-dialog>
+        </vaadin23-dialog>
       `;
     }
 
@@ -27,21 +28,21 @@
   },
 );
 
-describe('vaadin-dialog', () => {
+describe('vaadin23-dialog', () => {
   describe('custom element definition', () => {
     let dialog, tagName;
 
     beforeEach(() => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin23-dialog></vaadin23-dialog>');
       tagName = dialog.tagName.toLowerCase();
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -49,7 +50,7 @@
     let dialog;
 
     beforeEach(() => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin23-dialog></vaadin23-dialog>');
     });
 
     it('should enforce display: none to hide the host element', () => {
@@ -63,11 +64,11 @@
 
     beforeEach(() => {
       dialog = fixtureSync(`
-        <vaadin-dialog opened theme="foo">
+        <vaadin23-dialog opened theme="foo">
           <template>
             <div>Simple dialog</div>
           </template>
-        </vaadin-dialog>
+        </vaadin23-dialog>
       `);
       overlay = dialog.$.overlay;
       backdrop = overlay.$.backdrop;
@@ -169,7 +170,7 @@
     let dialog;
 
     beforeEach(() => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin23-dialog></vaadin23-dialog>');
     });
 
     it('should not throw an exception if template is not present', () => {
