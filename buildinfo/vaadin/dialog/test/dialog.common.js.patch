Index: test/dialog.common.js
===================================================================
--- test/dialog.common.js
+++ test/dialog.common.js
@@ -1,24 +1,25 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@vaadin/chai-plugins';
 import { aTimeout, click, esc, fixtureSync, listenOnce, nextRender, nextUpdate } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
-import { getDeepActiveElement } from '@vaadin/a11y-base/src/focus-utils.js';
+import { getDeepActiveElement } from '@scoped-vaadin/a11y-base/src/focus-utils.js';
 
-describe('vaadin-dialog', () => {
+describe('vaadin24-dialog', () => {
   describe('custom element definition', () => {
     let dialog, tagName;
 
     beforeEach(async () => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin24-dialog></vaadin24-dialog>');
       await nextRender();
       tagName = dialog.tagName.toLowerCase();
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -26,7 +27,7 @@
     let dialog;
 
     beforeEach(async () => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin24-dialog></vaadin24-dialog>');
       await nextRender();
     });
 
@@ -40,7 +41,7 @@
     let dialog, backdrop, overlay;
 
     beforeEach(async () => {
-      dialog = fixtureSync('<vaadin-dialog opened></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin24-dialog opened></vaadin24-dialog>');
       await nextRender();
 
       dialog.renderer = (root) => {
@@ -201,7 +202,7 @@
     let dialog;
 
     beforeEach(async () => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin24-dialog></vaadin24-dialog>');
       await nextRender();
     });
 
@@ -233,7 +234,7 @@
     beforeEach(async () => {
       const wrapper = fixtureSync(`
         <div>
-          <vaadin-dialog></vaadin-dialog>
+          <vaadin24-dialog></vaadin24-dialog>
           <button></button>
         </div>
       `);
@@ -267,7 +268,7 @@
     let dialog, overlay;
 
     beforeEach(async () => {
-      dialog = fixtureSync('<vaadin-dialog></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin24-dialog></vaadin24-dialog>');
       await nextRender();
       overlay = dialog.$.overlay;
     });
@@ -323,7 +324,7 @@
     });
 
     it('should allow declaring position/size as attributes', async () => {
-      dialog = fixtureSync('<vaadin-dialog top="100px" left="200px" width="100px" height="200px"></vaadin-dialog>');
+      dialog = fixtureSync('<vaadin24-dialog top="100px" left="200px" width="100px" height="200px"></vaadin24-dialog>');
       await nextRender();
       const overlay = dialog.$.overlay.$.overlay;
       expect(overlay.style.top).to.be.equal('100px');
