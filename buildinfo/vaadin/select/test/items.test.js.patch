Index: test/items.test.js
===================================================================
--- test/items.test.js
+++ test/items.test.js
@@ -7,17 +7,17 @@
   let select, overlay, listBox;
 
   beforeEach(() => {
-    select = fixtureSync(`<vaadin-select></vaadin-select>`);
+    select = fixtureSync(`<vaadin24-select></vaadin24-select>`);
     select.items = [{ label: 'Option 1', value: 'value-1' }];
-    overlay = select.shadowRoot.querySelector('vaadin-select-overlay');
-    listBox = overlay.content.querySelector('vaadin-select-list-box');
+    overlay = select.shadowRoot.querySelector('vaadin24-select-overlay');
+    listBox = overlay.content.querySelector('vaadin24-select-list-box');
     select.opened = true;
   });
 
   it('should render items', () => {
     expect(listBox).to.be.ok;
     expect(listBox.childNodes).to.have.lengthOf(1);
-    expect(listBox.childNodes[0].localName).to.equal('vaadin-select-item');
+    expect(listBox.childNodes[0].localName).to.equal('vaadin24-select-item');
     expect(listBox.childNodes[0].textContent).to.equal('Option 1');
     expect(listBox.childNodes[0].value).to.equal('value-1');
     expect(listBox.childNodes[0].disabled).to.be.false;
@@ -77,7 +77,7 @@
 
     it('should render items when removing the renderer', () => {
       select.renderer = null;
-      const newListBox = overlay.content.querySelector('vaadin-select-list-box');
+      const newListBox = overlay.content.querySelector('vaadin24-select-list-box');
       expect(newListBox).to.be.ok;
       expect(newListBox.childNodes).to.have.lengthOf(1);
       expect(newListBox.childNodes[0].textContent).to.equal('Option 1');
