Index: src/vaadin-select.js
===================================================================
--- src/vaadin-select.js
+++ src/vaadin-select.js
@@ -1,39 +1,40 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 /**
  * @license
  * Copyright (c) 2017 - 2022 Vaadin Ltd.
  * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */
-import '@vaadin/input-container/src/vaadin-input-container.js';
+import '@scoped-vaadin/input-container/src/vaadin-input-container.js';
 import './vaadin-select-item.js';
 import './vaadin-select-list-box.js';
 import './vaadin-select-overlay.js';
 import './vaadin-select-value-button.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
-import { addValueToAttribute } from '@vaadin/component-base/src/dom-utils.js';
-import { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';
-import { MediaQueryController } from '@vaadin/component-base/src/media-query-controller.js';
-import { SlotController } from '@vaadin/component-base/src/slot-controller.js';
-import { processTemplates } from '@vaadin/component-base/src/templates.js';
-import { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';
-import { generateUniqueId } from '@vaadin/component-base/src/unique-id-utils.js';
-import { DelegateFocusMixin } from '@vaadin/field-base/src/delegate-focus-mixin.js';
-import { DelegateStateMixin } from '@vaadin/field-base/src/delegate-state-mixin.js';
-import { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';
-import { fieldShared } from '@vaadin/field-base/src/styles/field-shared-styles.js';
-import { inputFieldContainer } from '@vaadin/field-base/src/styles/input-field-container-styles.js';
-import { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
+import { addValueToAttribute } from '@scoped-vaadin/component-base/src/dom-utils.js';
+import { ElementMixin } from '@scoped-vaadin/component-base/src/element-mixin.js';
+import { MediaQueryController } from '@scoped-vaadin/component-base/src/media-query-controller.js';
+import { SlotController } from '@scoped-vaadin/component-base/src/slot-controller.js';
+import { processTemplates } from '@scoped-vaadin/component-base/src/templates.js';
+import { TooltipController } from '@scoped-vaadin/component-base/src/tooltip-controller.js';
+import { generateUniqueId } from '@scoped-vaadin/component-base/src/unique-id-utils.js';
+import { DelegateFocusMixin } from '@scoped-vaadin/field-base/src/delegate-focus-mixin.js';
+import { DelegateStateMixin } from '@scoped-vaadin/field-base/src/delegate-state-mixin.js';
+import { FieldMixin } from '@scoped-vaadin/field-base/src/field-mixin.js';
+import { fieldShared } from '@scoped-vaadin/field-base/src/styles/field-shared-styles.js';
+import { inputFieldContainer } from '@scoped-vaadin/field-base/src/styles/input-field-container-styles.js';
+import { registerStyles, ThemableMixin } from '@scoped-vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';
 
-registerStyles('vaadin-select', [fieldShared, inputFieldContainer], { moduleId: 'vaadin-select-styles' });
+registerStyles('vaadin23-select', [fieldShared, inputFieldContainer], { moduleId: 'vaadin-select-styles' });
 
 /**
- * `<vaadin-select>` is a Web Component for selecting values from a list of items.
+ * `<vaadin23-select>` is a Web Component for selecting values from a list of items.
  *
  * ### Items
  *
  * Use the `items` property to define possible options for the select:
  *
  * ```html
- * <vaadin-select id="select"></vaadin-select>
+ * <vaadin23-select id="select"></vaadin23-select>
  * ```
  * ```js
  * const select = document.querySelector('#select');
@@ -59,10 +60,10 @@
  * ```js
  * const select = document.querySelector('#select');
  * select.renderer = function(root, select) {
- *   const listBox = document.createElement('vaadin-list-box');
- *   // append 3 <vaadin-item> elements
+ *   const listBox = document.createElement('vaadin23-list-box');
+ *   // append 3 <vaadin23-item> elements
  *   ['Jose', 'Manolo', 'Pedro'].forEach(function(name) {
- *     const item = document.createElement('vaadin-item');
+ *     const item = document.createElement('vaadin23-item');
  *     item.textContent = name;
  *     item.setAttribute('label', name)
  *     listBox.appendChild(item);
@@ -88,38 +89,38 @@
  * Custom property                    | Description                  | Target element          | Default
  * -----------------------------------|------------------------------|----------------------------------
  * `--vaadin-field-default-width`     | Default width of the field   | :host                   | `12em`
- * `--vaadin-select-text-field-width` | Effective width of the field | `vaadin-select-overlay` |
+ * `--vaadin-select-text-field-width` | Effective width of the field | `vaadin23-select-overlay` |
  *
- * `<vaadin-select>` provides mostly the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.
- * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.
+ * `<vaadin23-select>` provides mostly the same set of shadow DOM parts and state attributes as `<vaadin23-text-field>`.
+ * See [`<vaadin23-text-field>`](#/elements/vaadin-text-field) for the styling documentation.
  *
  *
- * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:
+ * In addition to `<vaadin23-text-field>` parts, the following parts are available for theming:
  *
  * Part name       | Description
  * ----------------|----------------
  * `toggle-button` | The toggle button
  *
- * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:
+ * In addition to `<vaadin23-text-field>` state attributes, the following state attributes are available for theming:
  *
  * Attribute | Description                 | Part name
  * ----------|-----------------------------|-----------
  * `opened`  | Set when the select is open | :host
  *
- * There are two exceptions in terms of styling compared to `<vaadin-text-field>`:
- * - the `clear-button` shadow DOM part does not exist in `<vaadin-select>`.
- * - the `input-prevented` state attribute is not supported by `<vaadin-select>`.
+ * There are two exceptions in terms of styling compared to `<vaadin23-text-field>`:
+ * - the `clear-button` shadow DOM part does not exist in `<vaadin23-select>`.
+ * - the `input-prevented` state attribute is not supported by `<vaadin23-select>`.
  *
  * ### Internal components
  *
- * In addition to `<vaadin-select>` itself, the following internal
+ * In addition to `<vaadin23-select>` itself, the following internal
  * components are themable:
  *
- * - `<vaadin-select-overlay>` - has the same API as [`<vaadin-overlay>`](#/elements/vaadin-overlay).
- * - `<vaadin-select-value-button>` - has the same API as [`<vaadin-button>`](#/elements/vaadin-button).
- * - [`<vaadin-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the button.
+ * - `<vaadin23-select-overlay>` - has the same API as [`<vaadin23-overlay>`](#/elements/vaadin-overlay).
+ * - `<vaadin23-select-value-button>` - has the same API as [`<vaadin23-button>`](#/elements/vaadin-button).
+ * - [`<vaadin23-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the button.
  *
- * Note: the `theme` attribute value set on `<vaadin-select>` is
+ * Note: the `theme` attribute value set on `<vaadin23-select>` is
  * propagated to the internal components listed above.
  *
  * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.
@@ -139,7 +140,7 @@
  */
 class Select extends DelegateFocusMixin(DelegateStateMixin(FieldMixin(ElementMixin(ThemableMixin(PolymerElement))))) {
   static get is() {
-    return 'vaadin-select';
+    return 'vaadin23-select';
   }
 
   static get template() {
@@ -156,7 +157,7 @@
           <span part="required-indicator" aria-hidden="true" on-click="focus"></span>
         </div>
 
-        <vaadin-input-container
+        <vaadin23-input-container
           part="input-field"
           readonly="[[readonly]]"
           disabled="[[disabled]]"
@@ -167,7 +168,7 @@
           <slot name="prefix" slot="prefix"></slot>
           <slot name="value"></slot>
           <div part="toggle-button" slot="suffix" aria-hidden="true" on-mousedown="_onToggleMouseDown"></div>
-        </vaadin-input-container>
+        </vaadin23-input-container>
 
         <div part="helper-text">
           <slot name="helper"></slot>
@@ -178,13 +179,13 @@
         </div>
       </div>
 
-      <vaadin-select-overlay
+      <vaadin23-select-overlay
         position-target="[[_inputContainer]]"
         opened="{{opened}}"
         with-backdrop="[[_phone]]"
         phone$="[[_phone]]"
         theme$="[[_theme]]"
-      ></vaadin-select-overlay>
+      ></vaadin23-select-overlay>
 
       <slot name="tooltip"></slot>
     `;
@@ -208,7 +209,7 @@
        * ];
        * ```
        *
-       * Note: each item is rendered by default as the internal `<vaadin-select-item>` that is an extension of `<vaadin-item>`.
+       * Note: each item is rendered by default as the internal `<vaadin23-select-item>` that is an extension of `<vaadin23-item>`.
        * To render the item with a custom component, provide a tag name by the `component` property.
        *
        * @type {!Array<!SelectItem>}
@@ -231,12 +232,12 @@
       },
 
       /**
-       * Custom function for rendering the content of the `<vaadin-select>`.
+       * Custom function for rendering the content of the `<vaadin23-select>`.
        * Receives two arguments:
        *
-       * - `root` The `<vaadin-select-overlay>` internal container
+       * - `root` The `<vaadin23-select-overlay>` internal container
        *   DOM element. Append your content to it.
-       * - `select` The reference to the `<vaadin-select>` element.
+       * - `select` The reference to the `<vaadin23-select>` element.
        * @type {!SelectRenderer | undefined}
        */
       renderer: Function,
@@ -346,13 +347,13 @@
   ready() {
     super.ready();
 
-    this._overlayElement = this.shadowRoot.querySelector('vaadin-select-overlay');
+    this._overlayElement = this.shadowRoot.querySelector('vaadin23-select-overlay');
     this._inputContainer = this.shadowRoot.querySelector('[part~="input-field"]');
 
     this._valueButtonController = new SlotController(
       this,
       'value',
-      () => document.createElement('vaadin-select-value-button'),
+      () => document.createElement('vaadin23-select-value-button'),
       (host, btn) => {
         this._setFocusElement(btn);
         this.ariaTarget = btn;
@@ -456,7 +457,7 @@
       });
 
       menuElement.addEventListener('selected-changed', () => this.__updateValueButton());
-      // Use capture phase to make it possible for `<vaadin-grid-pro-edit-select>`
+      // Use capture phase to make it possible for `<vaadin23-grid-pro-edit-select>`
       // to override and handle the keydown event before the value change happens.
       menuElement.addEventListener('keydown', (e) => this._onKeyDownInside(e), true);
       menuElement.addEventListener(
@@ -496,7 +497,7 @@
    * @private
    */
   _onClick(event) {
-    // Prevent parent components such as `vaadin-grid`
+    // Prevent parent components such as `vaadin23-grid`
     // from handling the click event after it bubbles.
     event.preventDefault();
 
@@ -622,7 +623,7 @@
    * @private
    */
   __createItemElement(item) {
-    const itemElement = document.createElement(item.component || 'vaadin-select-item');
+    const itemElement = document.createElement(item.component || 'vaadin23-select-item');
     if (item.label) {
       itemElement.textContent = item.label;
     }
@@ -746,7 +747,7 @@
 
     let listBox = root.firstElementChild;
     if (!listBox) {
-      listBox = document.createElement('vaadin-select-list-box');
+      listBox = document.createElement('vaadin23-select-list-box');
       root.appendChild(listBox);
     }
 
@@ -763,6 +764,6 @@
    */
 }
 
-customElements.define(Select.is, Select);
+internalCustomElements.define(Select.is, Select);
 
 export { Select };
