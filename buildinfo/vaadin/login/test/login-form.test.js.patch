Index: test/login-form.test.js
===================================================================
--- test/login-form.test.js
+++ test/login-form.test.js
@@ -17,7 +17,7 @@
   });
 
   beforeEach(async () => {
-    loginForm = fixtureSync(`<vaadin-login-form action='login-action'></vaadin-login-form>
+    loginForm = fixtureSync(`<vaadin24-login-form action='login-action'></vaadin24-login-form>
     <meta name="_csrf_parameter" content="_csrf" />
     <meta name="_csrf_header" content="X-CSRF-TOKEN" />
     <meta name="_csrf" content="28e4c684-fb5e-4c79-b8e2-a2177569edfa" />`);
@@ -50,9 +50,9 @@
   });
 
   beforeEach(async () => {
-    login = fixtureSync('<vaadin-login-form action="login-action"></vaadin-login-form>');
+    login = fixtureSync('<vaadin24-login-form action="login-action"></vaadin24-login-form>');
     await nextRender();
-    formWrapper = login.querySelector('vaadin-login-form-wrapper');
+    formWrapper = login.querySelector('vaadin24-login-form-wrapper');
   });
 
   afterEach(() => {
@@ -62,7 +62,7 @@
   it('should emit forgot password event', () => {
     const spy = sinon.spy();
     login.addEventListener('forgot-password', spy);
-    const forgotElement = login.querySelector('vaadin-button[slot="forgot-password"]');
+    const forgotElement = login.querySelector('vaadin24-button[slot="forgot-password"]');
     forgotElement.click();
     expect(spy.calledOnce).to.be.true;
   });
@@ -140,7 +140,7 @@
   });
 
   it('should disable button after submitting form', async () => {
-    const submit = login.querySelector('vaadin-button');
+    const submit = login.querySelector('vaadin24-button');
     const { vaadinLoginPassword } = fillUsernameAndPassword(login);
     enter(vaadinLoginPassword);
     await nextUpdate(login);
@@ -148,7 +148,7 @@
   });
 
   it('should prevent submit call when login is disabled', async () => {
-    const submit = login.querySelector('vaadin-button');
+    const submit = login.querySelector('vaadin24-button');
     const { vaadinLoginPassword } = fillUsernameAndPassword(login);
 
     login.setAttribute('disabled', 'disabled');
@@ -161,7 +161,7 @@
   });
 
   it('should not disable button on button click if form is invalid', async () => {
-    const submit = login.querySelector('vaadin-button');
+    const submit = login.querySelector('vaadin24-button');
     expect(submit.disabled).to.not.be.true;
     tap(submit);
     await nextUpdate(login);
@@ -169,7 +169,7 @@
   });
 
   it('should disable button on button click if form is valid', async () => {
-    const submit = login.querySelector('vaadin-button');
+    const submit = login.querySelector('vaadin24-button');
     fillUsernameAndPassword(login);
     tap(submit);
     await nextUpdate(login);
@@ -255,7 +255,7 @@
 
   beforeEach(async () => {
     activeElement = document.activeElement;
-    fixtureSync('<vaadin-login-form no-autofocus></vaadin-login-form>');
+    fixtureSync('<vaadin24-login-form no-autofocus></vaadin24-login-form>');
     await nextRender();
   });
 
@@ -268,9 +268,9 @@
   let login, formWrapper;
 
   beforeEach(async () => {
-    login = fixtureSync('<vaadin-login-form error></vaadin-login-form>');
+    login = fixtureSync('<vaadin24-login-form error></vaadin24-login-form>');
     await nextRender();
-    formWrapper = login.querySelector('vaadin-login-form-wrapper');
+    formWrapper = login.querySelector('vaadin24-login-form-wrapper');
   });
 
   it('should show error message if the error attribute is set', () => {
@@ -295,9 +295,9 @@
   let login, formWrapper;
 
   beforeEach(async () => {
-    login = fixtureSync('<vaadin-login-form theme="green"></vaadin-login-form>');
+    login = fixtureSync('<vaadin24-login-form theme="green"></vaadin24-login-form>');
     await nextRender();
-    formWrapper = login.querySelector('vaadin-login-form-wrapper');
+    formWrapper = login.querySelector('vaadin24-login-form-wrapper');
   });
 
   it('should be possible to style parts', () => {
