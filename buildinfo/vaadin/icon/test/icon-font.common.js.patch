Index: test/icon-font.common.js
===================================================================
--- test/icon-font.common.js
+++ test/icon-font.common.js
@@ -16,7 +16,7 @@
     let icon;
 
     beforeEach(async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextResize(icon);
     });
 
@@ -71,21 +71,21 @@
     let icon;
 
     it('should add the icon class to element class list', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextFrame();
       expect(icon.classList.contains('my-icon-font')).to.be.true;
       expect(icon.classList.contains('icon-before')).to.be.true;
     });
 
     it('should not overwrite existing classes', async () => {
-      icon = fixtureSync('<vaadin-icon class="foo"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon class="foo"></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = 'my-icon-font icon-before';
       expect(icon.classList.contains('foo')).to.be.true;
     });
 
     it('should change icon classes', async () => {
-      icon = fixtureSync('<vaadin-icon class="foo" icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon class="foo" icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = 'my-icon-font icon-after';
       expect(icon.classList.contains('icon-before')).to.be.false;
@@ -93,7 +93,7 @@
     });
 
     it('should remove all icon classes', async () => {
-      icon = fixtureSync('<vaadin-icon class="foo" icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon class="foo" icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = '';
       expect(icon.classList.contains('my-icon-font')).to.be.false;
@@ -102,7 +102,7 @@
     });
 
     it('should restore the icon class to element class list', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextFrame();
       icon.className = 'foo';
       expect(icon.classList.contains('my-icon-font')).to.be.true;
@@ -111,7 +111,7 @@
     });
 
     it('should restore the missing icon class to element class list', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextFrame();
       icon.className = 'my-icon-font';
       expect(icon.classList.contains('my-icon-font')).to.be.true;
@@ -119,7 +119,7 @@
     });
 
     it('should restore the removed icon class to element class list', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font icon-before"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font icon-before"></vaadin24-icon>');
       await nextFrame();
       icon.classList.remove('my-icon-font');
       expect(icon.classList.contains('my-icon-font')).to.be.true;
@@ -127,28 +127,28 @@
     });
 
     it('should reflect icon class as an attribute', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = 'my-icon-font icon-before';
       expect(icon.getAttribute('icon-class')).to.equal('my-icon-font icon-before');
     });
 
     it('should add icon attribute if icon class is set', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = 'my-icon-font icon-before';
       expect(icon.hasAttribute('icon')).to.be.true;
     });
 
     it('should not add icon attribute if icon class is not set', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = null;
       expect(icon.hasAttribute('icon')).to.be.false;
     });
 
     it('should not override existing icon', async () => {
-      icon = fixtureSync('<vaadin-icon icon="foo:bar"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon="foo:bar"></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = 'my-icon-font icon-before';
       expect(icon.icon).to.equal('foo:bar');
@@ -159,21 +159,21 @@
     let icon;
 
     it('should reflect unprefixed char as font-icon-content attribute', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font"></vaadin24-icon>');
       await nextFrame();
       icon.char = 'e900';
       expect(icon.getAttribute('font-icon-content')).to.equal('\ue900');
     });
 
     it('should reflect prefixed char as font-icon-content attribute', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font"></vaadin24-icon>');
       await nextFrame();
       icon.char = '\ue900';
       expect(icon.getAttribute('font-icon-content')).to.equal('\ue900');
     });
 
     it('should remove font-icon-content attribute', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font"></vaadin24-icon>');
       await nextFrame();
       icon.char = 'e900';
       icon.char = null;
@@ -181,7 +181,7 @@
     });
 
     it('should add icon attribute if char is set', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.char = '\ue900';
       icon.style.fontFamily = 'My icons';
@@ -189,7 +189,7 @@
     });
 
     it('should not add icon attribute if char is not set', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.char = null;
       icon.style.fontFamily = 'My icons';
@@ -197,7 +197,7 @@
     });
 
     it('should not override existing icon', async () => {
-      icon = fixtureSync('<vaadin-icon icon="foo:bar"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon="foo:bar"></vaadin24-icon>');
       await nextFrame();
       icon.char = '\ue900';
       icon.style.fontFamily = 'My icons';
@@ -209,14 +209,14 @@
     let icon;
 
     it('should reflect ligature as font-icon-content attribute', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font"></vaadin24-icon>');
       await nextFrame();
       icon.ligature = 'foo';
       expect(icon.getAttribute('font-icon-content')).to.equal('foo');
     });
 
     it('should remove font-icon-content attribute', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="my-icon-font"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="my-icon-font"></vaadin24-icon>');
       await nextFrame();
       icon.ligature = 'foo';
       icon.ligature = null;
@@ -224,7 +224,7 @@
     });
 
     it('should add icon attribute if ligature is set', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.ligature = '\ue900';
       icon.style.fontFamily = 'My icons';
@@ -232,7 +232,7 @@
     });
 
     it('should not add icon attribute if ligature is not set', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.ligature = null;
       icon.style.fontFamily = 'My icons';
@@ -240,7 +240,7 @@
     });
 
     it('should not override existing icon', async () => {
-      icon = fixtureSync('<vaadin-icon icon="foo:bar"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon="foo:bar"></vaadin24-icon>');
       await nextFrame();
       icon.ligature = 'foo';
       icon.style.fontFamily = 'My icons';
@@ -252,7 +252,7 @@
     let icon;
 
     it('should set font-family for the icon element', async () => {
-      icon = fixtureSync('<vaadin-icon char="e900"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon char="e900"></vaadin24-icon>');
       await nextFrame();
       icon.fontFamily = 'My icons';
       const fontIconStyle = getComputedStyle(icon, ':before');
@@ -260,7 +260,7 @@
     });
 
     it('should set font-family with numbers for the icon element', async () => {
-      icon = fixtureSync('<vaadin-icon char="e900"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon char="e900"></vaadin24-icon>');
       await nextFrame();
       icon.fontFamily = 'My icons 6';
       const fontIconStyle = getComputedStyle(icon, ':before');
@@ -291,32 +291,32 @@
     });
 
     fallBackIt('should have the custom property (iconClass)', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="foo"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="foo"></vaadin24-icon>');
       await nextFrame();
       expect(icon.style.getPropertyValue('--_vaadin-font-icon-size')).to.equal('24px');
     });
 
     fallBackIt('should have the custom property (char)', async () => {
-      icon = fixtureSync('<vaadin-icon char="foo"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon char="foo"></vaadin24-icon>');
       await nextFrame();
       expect(icon.style.getPropertyValue('--_vaadin-font-icon-size')).to.equal('24px');
     });
 
     fallBackIt('should not have the custom property', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       expect(icon.style.getPropertyValue('--_vaadin-font-icon-size')).to.equal('');
     });
 
     fallBackIt('should set the custom property', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.iconClass = 'foo';
       expect(icon.style.getPropertyValue('--_vaadin-font-icon-size')).to.equal('24px');
     });
 
     fallBackIt('should update the custom property', async () => {
-      icon = fixtureSync('<vaadin-icon icon-class="foo"></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon icon-class="foo"></vaadin24-icon>');
       await nextFrame();
       icon.style.width = '100px';
       icon.style.height = '100px';
@@ -325,7 +325,7 @@
     });
 
     fallBackIt('should not update the custom property', async () => {
-      icon = fixtureSync('<vaadin-icon></vaadin-icon>');
+      icon = fixtureSync('<vaadin24-icon></vaadin24-icon>');
       await nextFrame();
       icon.style.width = '100px';
       icon.style.height = '100px';
