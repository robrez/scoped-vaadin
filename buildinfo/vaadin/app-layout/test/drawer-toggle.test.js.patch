Index: test/drawer-toggle.test.js
===================================================================
--- test/drawer-toggle.test.js
+++ test/drawer-toggle.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { enter, fixtureSync, space } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
@@ -7,7 +8,7 @@
   let toggle;
 
   beforeEach(() => {
-    toggle = fixtureSync('<vaadin-drawer-toggle></vaadin-drawer-toggle>');
+    toggle = fixtureSync('<vaadin23-drawer-toggle></vaadin23-drawer-toggle>');
   });
 
   describe('custom element definition', () => {
@@ -18,11 +19,11 @@
     });
 
     it('should be defined in custom element registry', () => {
-      expect(customElements.get(tagName)).to.be.ok;
+      expect(internalCustomElements.get(tagName)).to.be.ok;
     });
 
     it('should have a valid static "is" getter', () => {
-      expect(customElements.get(tagName).is).to.equal(tagName);
+      expect(internalCustomElements.get(tagName).is).to.equal(tagName);
     });
   });
 
@@ -115,7 +116,7 @@
 
     it('should show fallback icon when adding element to non-default slot', () => {
       // Emulate adding element in HTML wrapped with whitespace text nodes
-      toggle.innerHTML = ' <vaadin-tooltip slot="tooltip"></vaadin-tooltip> ';
+      toggle.innerHTML = ' <vaadin23-tooltip slot="tooltip"></vaadin23-tooltip> ';
       toggle._observer.flush();
       expect(icon.hasAttribute('hidden')).to.be.false;
     });
@@ -132,7 +133,7 @@
 
     it('should hide fallback icon when clearing all slotted content', () => {
       // Emulate adding element in HTML wrapped with whitespace text nodes
-      toggle.innerHTML = ' <vaadin-tooltip slot="tooltip"></vaadin-tooltip> ';
+      toggle.innerHTML = ' <vaadin23-tooltip slot="tooltip"></vaadin23-tooltip> ';
       toggle._observer.flush();
 
       toggle.innerHTML = '';
