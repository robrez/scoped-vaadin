Index: test/lit-renderer-directives.common.js
===================================================================
--- test/lit-renderer-directives.common.js
+++ test/lit-renderer-directives.common.js
@@ -2,21 +2,21 @@
 import { fixtureSync, nextFrame } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
 import { html, render } from 'lit';
-import { flushComboBox } from '@vaadin/combo-box/test/helpers.js';
+import { flushComboBox } from '@scoped-vaadin/combo-box/test/helpers.js';
 import { multiSelectComboBoxRenderer } from '../lit.js';
 
 async function renderComboBox(container, { items }) {
   render(
     html`
-      <vaadin-multi-select-combo-box
+      <vaadin24-multi-select-combo-box
         .items="${items}"
         ${items ? multiSelectComboBoxRenderer((item) => html`${item}`, items) : null}
-      ></vaadin-multi-select-combo-box>
+      ></vaadin24-multi-select-combo-box>
     `,
     container,
   );
   await nextFrame();
-  return container.querySelector('vaadin-multi-select-combo-box');
+  return container.querySelector('vaadin24-multi-select-combo-box');
 }
 
 describe('lit renderer directives', () => {
@@ -43,14 +43,14 @@
 
       it('should render items with the renderer when the combo-box is opened', () => {
         comboBox.opened = true;
-        const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+        const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
         expect(items[0].textContent).to.equal('Item');
       });
 
       it('should re-render items when the combo-box is opened and a renderer dependency changes', async () => {
         comboBox.opened = true;
         await renderComboBox(container, { items: ['New Item'] });
-        const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+        const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
         expect(items[0].textContent).to.equal('New Item');
       });
     });
@@ -62,16 +62,16 @@
         rendererSpy = sinon.spy();
         render(
           html`
-            <vaadin-multi-select-combo-box
+            <vaadin24-multi-select-combo-box
               opened
               .items="${['Item']}"
               ${multiSelectComboBoxRenderer(rendererSpy)}
-            ></vaadin-multi-select-combo-box>
+            ></vaadin24-multi-select-combo-box>
           `,
           container,
         );
         await nextFrame();
-        comboBox = container.querySelector('vaadin-multi-select-combo-box');
+        comboBox = container.querySelector('vaadin24-multi-select-combo-box');
         // Needed by Lit
         flushComboBox(comboBox.$.comboBox);
       });
