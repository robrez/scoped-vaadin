Index: test/readonly.test.js
===================================================================
--- test/readonly.test.js
+++ test/readonly.test.js
@@ -12,7 +12,7 @@
     beforeEach(async () => {
       comboBox = fixtureSync(
         `<div>
-          <vaadin-multi-select-combo-box readonly></vaadin-multi-select-combo-box>
+          <vaadin24-multi-select-combo-box readonly></vaadin24-multi-select-combo-box>
           <input id="last-global-focusable" />
         </div>`,
       ).firstElementChild;
@@ -78,20 +78,20 @@
     it('should not set item focus-ring attribute on Arrow Down', async () => {
       await sendKeys({ down: 'ArrowDown' });
       await sendKeys({ down: 'ArrowDown' });
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items[0].hasAttribute('focus-ring')).to.be.false;
     });
 
     it('should not set item focus-ring attribute on Arrow Up', async () => {
       await sendKeys({ down: 'ArrowDown' });
       await sendKeys({ down: 'ArrowDown' });
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items[1].hasAttribute('focus-ring')).to.be.false;
     });
 
     it('should only render selected items in the dropdown when readonly', () => {
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(2);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('orange');
@@ -100,7 +100,7 @@
     it('should render regular items in the dropdown when readonly is off', () => {
       comboBox.readonly = false;
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(4);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('banana');
@@ -112,28 +112,28 @@
       comboBox.selectedItems = [];
       comboBox.selectedItems = ['lemon'];
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(1);
       expect(items[0].textContent).to.equal('lemon');
     });
 
     it('should not set selected attribute on the dropdown items', () => {
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items[0].hasAttribute('selected')).to.be.false;
       expect(items[1].hasAttribute('selected')).to.be.false;
     });
 
     it('should set readonly attribute on the dropdown items', () => {
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items[0].hasAttribute('readonly')).to.be.true;
       expect(items[1].hasAttribute('readonly')).to.be.true;
     });
 
     it('should not un-select item on click when readonly', () => {
       inputElement.click();
-      const item = document.querySelector('vaadin-multi-select-combo-box-item');
+      const item = document.querySelector('vaadin24-multi-select-combo-box-item');
       item.click();
       expect(comboBox.selectedItems.length).to.equal(2);
     });
@@ -160,7 +160,7 @@
     const asyncDataProvider = getAsyncDataProvider(['apple', 'banana', 'lemon', 'orange']);
 
     beforeEach(async () => {
-      comboBox = fixtureSync(`<vaadin-multi-select-combo-box readonly></vaadin-multi-select-combo-box>`);
+      comboBox = fixtureSync(`<vaadin24-multi-select-combo-box readonly></vaadin24-multi-select-combo-box>`);
       asyncDataProviderSpy = sinon.spy(asyncDataProvider);
       comboBox.dataProvider = asyncDataProviderSpy;
       comboBox.selectedItems = ['apple', 'orange'];
@@ -180,7 +180,7 @@
       inputElement.click();
       // Wait for the async data provider timeout
       await aTimeout(0);
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(2);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('orange');
@@ -191,7 +191,7 @@
       inputElement.click();
       // Wait for the async data provider timeout
       await aTimeout(0);
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(4);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('banana');
@@ -204,7 +204,7 @@
       // Wait for the async data provider timeout
       await aTimeout(0);
       comboBox.size = 4;
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(2);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('orange');
@@ -213,7 +213,7 @@
 
   describe('dataProvider is set after selectedItems', () => {
     beforeEach(async () => {
-      comboBox = fixtureSync(`<vaadin-multi-select-combo-box readonly></vaadin-multi-select-combo-box>`);
+      comboBox = fixtureSync(`<vaadin24-multi-select-combo-box readonly></vaadin24-multi-select-combo-box>`);
       comboBox.selectedItems = ['apple', 'orange'];
       comboBox.dataProvider = getAsyncDataProvider(['apple', 'banana', 'lemon', 'orange']);
       await nextRender();
@@ -224,7 +224,7 @@
       inputElement.click();
       // Wait for the async data provider timeout
       await aTimeout(0);
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(2);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('orange');
@@ -236,7 +236,7 @@
     const asyncDataProvider2 = getAsyncDataProvider(['new item 1', 'new item 2']);
 
     beforeEach(async () => {
-      comboBox = fixtureSync(`<vaadin-multi-select-combo-box></vaadin-multi-select-combo-box>`);
+      comboBox = fixtureSync(`<vaadin24-multi-select-combo-box></vaadin24-multi-select-combo-box>`);
       comboBox.dataProvider = asyncDataProvider1;
       await nextRender();
       // Load the first page.
@@ -250,7 +250,7 @@
       comboBox.inputElement.click();
       // Wait for the async data provider timeout
       await aTimeout(0);
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(2);
       expect(items[0].textContent).to.equal('new item 1');
       expect(items[1].textContent).to.equal('new item 2');
@@ -259,7 +259,7 @@
 
   describe('external filtering', () => {
     beforeEach(async () => {
-      comboBox = fixtureSync(`<vaadin-multi-select-combo-box></vaadin-multi-select-combo-box>`);
+      comboBox = fixtureSync(`<vaadin24-multi-select-combo-box></vaadin24-multi-select-combo-box>`);
       comboBox.filteredItems = ['apple', 'banana', 'lemon', 'orange'];
       comboBox.selectedItems = ['apple', 'orange'];
       comboBox.readonly = true;
@@ -270,7 +270,7 @@
 
     it('should only render selected items in the dropdown when readonly', () => {
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(2);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('orange');
@@ -279,7 +279,7 @@
     it('should render regular items in the dropdown when readonly is off', () => {
       comboBox.readonly = false;
       inputElement.click();
-      const items = document.querySelectorAll('vaadin-multi-select-combo-box-item');
+      const items = document.querySelectorAll('vaadin24-multi-select-combo-box-item');
       expect(items.length).to.equal(4);
       expect(items[0].textContent).to.equal('apple');
       expect(items[1].textContent).to.equal('banana');
