Index: test/validation.common.js
===================================================================
--- test/validation.common.js
+++ test/validation.common.js
@@ -10,7 +10,7 @@
     let validateSpy, changeSpy;
 
     beforeEach(async () => {
-      field = fixtureSync('<vaadin-number-field></vaadin-number-field>');
+      field = fixtureSync('<vaadin24-number-field></vaadin24-number-field>');
       await nextRender();
       input = field.inputElement;
       validateSpy = sinon.spy(field, 'validate');
@@ -143,7 +143,7 @@
 
   describe('bad input', () => {
     beforeEach(async () => {
-      field = fixtureSync('<vaadin-number-field></vaadin-number-field>');
+      field = fixtureSync('<vaadin24-number-field></vaadin24-number-field>');
       await nextRender();
       input = field.inputElement;
       input.focus();
@@ -177,7 +177,7 @@
     let validateSpy;
 
     beforeEach(() => {
-      field = document.createElement('vaadin-number-field');
+      field = document.createElement('vaadin24-number-field');
       validateSpy = sinon.spy(field, 'validate');
     });
 
@@ -235,7 +235,7 @@
   describe('step', () => {
     describe('default', () => {
       beforeEach(async () => {
-        field = fixtureSync('<vaadin-number-field></vaadin-number-field>');
+        field = fixtureSync('<vaadin24-number-field></vaadin24-number-field>');
         await nextRender();
       });
 
@@ -250,7 +250,7 @@
 
     describe('values', () => {
       beforeEach(async () => {
-        field = fixtureSync('<vaadin-number-field></vaadin-number-field>');
+        field = fixtureSync('<vaadin24-number-field></vaadin24-number-field>');
         field.step = 1.5;
         await nextRender();
       });
@@ -274,7 +274,7 @@
 
     describe('basis', () => {
       beforeEach(async () => {
-        field = fixtureSync('<vaadin-number-field></vaadin-number-field>');
+        field = fixtureSync('<vaadin24-number-field></vaadin24-number-field>');
         field.min = 1;
         field.step = 1.5;
         await nextRender();
@@ -299,7 +299,7 @@
 
     describe('the default step is set initially', () => {
       beforeEach(async () => {
-        field = fixtureSync('<vaadin-number-field step="1"></vaadin-number-field>');
+        field = fixtureSync('<vaadin24-number-field step="1"></vaadin24-number-field>');
         await nextRender();
       });
 
@@ -316,7 +316,7 @@
 
     describe('a custom step is set initially', () => {
       beforeEach(async () => {
-        field = fixtureSync('<vaadin-number-field step="1.5"></vaadin-number-field>');
+        field = fixtureSync('<vaadin24-number-field step="1.5"></vaadin24-number-field>');
         await nextRender();
       });
 
@@ -334,7 +334,7 @@
 
   describe('removing constraints', () => {
     beforeEach(async () => {
-      field = fixtureSync('<vaadin-number-field></vaadin-number-field>');
+      field = fixtureSync('<vaadin24-number-field></vaadin24-number-field>');
       await nextRender();
     });
 
@@ -439,7 +439,7 @@
 
   describe('invalid is set initially', () => {
     beforeEach(async () => {
-      field = fixtureSync('<vaadin-number-field invalid></vaadin-number-field>');
+      field = fixtureSync('<vaadin24-number-field invalid></vaadin24-number-field>');
       await nextRender();
     });
 
@@ -450,7 +450,7 @@
 
   describe('invalid and value are set initially', () => {
     beforeEach(async () => {
-      field = fixtureSync('<vaadin-number-field invalid value="123456"></vaadin-number-field>');
+      field = fixtureSync('<vaadin24-number-field invalid value="123456"></vaadin24-number-field>');
       await nextRender();
     });
 
@@ -461,12 +461,12 @@
 
   describe('checkValidity', () => {
     it('should return true when called before connected to the DOM', () => {
-      const field = document.createElement('vaadin-number-field');
+      const field = document.createElement('vaadin24-number-field');
       expect(field.checkValidity()).to.be.true;
     });
 
     it('should return false when called before connected to the DOM and invalid', () => {
-      const field = document.createElement('vaadin-number-field');
+      const field = document.createElement('vaadin24-number-field');
       field.invalid = true;
       expect(field.checkValidity()).to.be.false;
     });
