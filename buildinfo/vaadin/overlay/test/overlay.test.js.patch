Index: test/overlay.test.js
===================================================================
--- test/overlay.test.js
+++ test/overlay.test.js
@@ -1,3 +1,4 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import {
   click,
@@ -12,18 +13,18 @@
 } from '@vaadin/testing-helpers';
 import { resetMouse, sendMouse } from '@web/test-runner-commands';
 import sinon from 'sinon';
-import '@vaadin/text-field/vaadin-text-field.js';
+import '@scoped-vaadin/text-field/vaadin-text-field.js';
 import '../vaadin-overlay.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
 
-customElements.define(
+internalCustomElements.define(
   'overlay-wrapper',
   class extends PolymerElement {
     static get template() {
       return html`
-        <vaadin-overlay id="overlay" opened="[[opened]]">
+        <vaadin23-overlay id="overlay" opened="[[opened]]">
           <template> overlay content </template>
-        </vaadin-overlay>
+        </vaadin23-overlay>
       `;
     }
 
@@ -35,18 +36,18 @@
   },
 );
 
-describe('vaadin-overlay', () => {
+describe('vaadin23-overlay', () => {
   describe('moving overlay', () => {
     let parent, overlay;
 
     beforeEach(async () => {
       parent = fixtureSync(`
         <div id="parent">
-          <vaadin-overlay>
+          <vaadin23-overlay>
             <template>
               overlay-content
             </template>
-          </vaadin-overlay>
+          </vaadin23-overlay>
         </div>
       `);
       overlay = parent.children[0];
@@ -74,11 +75,11 @@
 
     beforeEach(async () => {
       overlay = fixtureSync(`
-        <vaadin-overlay>
+        <vaadin23-overlay>
           <template>
             overlay-content
           </template>
-        </vaadin-overlay>
+        </vaadin23-overlay>
       `);
       overlay._observer.flush();
       overlay.opened = true;
@@ -114,11 +115,11 @@
 
     beforeEach(async () => {
       overlay = fixtureSync(`
-        <vaadin-overlay>
+        <vaadin23-overlay>
           <template>
             overlay-content
           </template>
-        </vaadin-overlay>
+        </vaadin23-overlay>
       `);
       overlay._observer.flush();
       backdrop = overlay.$.backdrop;
@@ -156,11 +157,11 @@
 
     beforeEach(async () => {
       overlay = fixtureSync(`
-        <vaadin-overlay>
+        <vaadin23-overlay>
           <template>
             overlay-content
           </template>
-        </vaadin-overlay>
+        </vaadin23-overlay>
       `);
       overlay._observer.flush();
       overlay.opened = true;
@@ -209,7 +210,7 @@
 
     beforeEach(async () => {
       parent = document.createElement('div');
-      overlay = fixtureSync('<vaadin-overlay></vaadin-overlay>', parent);
+      overlay = fixtureSync('<vaadin23-overlay></vaadin23-overlay>', parent);
       overlay.renderer = (root) => {
         if (!root.firstChild) {
           const div = document.createElement('div');
@@ -444,11 +445,11 @@
 
     beforeEach(async () => {
       overlay = fixtureSync(`
-        <vaadin-overlay>
+        <vaadin23-overlay>
           <template>
             overlay-content
           </template>
-        </vaadin-overlay>
+        </vaadin23-overlay>
       `);
       overlayPart = overlay.$.overlay;
       overlay._observer.flush();
@@ -520,11 +521,11 @@
     beforeEach(async () => {
       parent = fixtureSync(`
         <div id="parent">
-          <vaadin-overlay>
+          <vaadin23-overlay>
             <template>
               <overlay-wrapper></-wrapper>
             </template>
-          </vaadin-overlay>
+          </vaadin23-overlay>
         </div>
       `);
       overlay = parent.children[0];
@@ -539,7 +540,7 @@
 
     it('should not exit modal state when opened changes from undefined to false', () => {
       const wrapper = overlay.content.querySelector('overlay-wrapper');
-      const inner = wrapper.shadowRoot.querySelector('vaadin-overlay');
+      const inner = wrapper.shadowRoot.querySelector('vaadin23-overlay');
       const spy = sinon.spy(inner, '_exitModalState');
       wrapper.opened = false;
       expect(spy.called).to.be.false;
@@ -552,11 +553,11 @@
 
     beforeEach(async () => {
       overlay = fixtureSync(`
-        <vaadin-overlay>
+        <vaadin23-overlay>
           <template>
             overlay-content
           </template>
-        </vaadin-overlay>
+        </vaadin23-overlay>
       `);
       overlay._observer.flush();
       overlay.opened = true;
