Index: test/focus-trap.test.js
===================================================================
--- test/focus-trap.test.js
+++ test/focus-trap.test.js
@@ -1,20 +1,21 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { fixtureSync, nextRender, oneEvent, tabKeyDown } from '@vaadin/testing-helpers';
-import '@vaadin/button/vaadin-button.js';
-import '@vaadin/text-field/vaadin-text-field.js';
-import '@vaadin/radio-group/vaadin-radio-group.js';
-import '@vaadin/radio-group/vaadin-radio-button.js';
+import '@scoped-vaadin/button/vaadin-button.js';
+import '@scoped-vaadin/text-field/vaadin-text-field.js';
+import '@scoped-vaadin/radio-group/vaadin-radio-group.js';
+import '@scoped-vaadin/radio-group/vaadin-radio-button.js';
 import '../vaadin-overlay.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
-import { getFocusableElements, isElementFocused } from '@vaadin/component-base/src/focus-utils.js';
+import { getFocusableElements, isElementFocused } from '@scoped-vaadin/component-base/src/focus-utils.js';
 
 const shadowTemplate = document.createElement('template');
 shadowTemplate.innerHTML = `
   <input type="text" id="text">
-  <vaadin-text-field></vaadin-text-field>
+  <vaadin24-text-field></vaadin24-text-field>
 `;
 
-customElements.define(
+internalCustomElements.define(
   'container-with-shadow',
   class extends HTMLElement {
     constructor() {
@@ -26,12 +27,12 @@
   },
 );
 
-customElements.define(
+internalCustomElements.define(
   'overlay-components-wrapper',
   class extends PolymerElement {
     static get template() {
       return html`
-        <vaadin-overlay id="defaultOverlay" focus-trap>
+        <vaadin24-overlay id="defaultOverlay" focus-trap>
           <template>
             overlay-content
             <button>tabindex 0</button>
@@ -39,44 +40,44 @@
             <select tabindex="2">
               <option>tabindex 2</option>
             </select>
-            <vaadin-text-field></vaadin-text-field>
+            <vaadin24-text-field></vaadin24-text-field>
             <textarea tabindex="1">tabindex 1</textarea>
             <input type="text" id="text" value="tabindex 0" />
-            <vaadin-radio-group>
-              <vaadin-radio-button id="radioButton1" label="Button 1"></vaadin-radio-button>
-              <vaadin-radio-button id="radioButton2" label="Button 2"></vaadin-radio-button>
-              <vaadin-radio-button id="radioButton3" label="Button 3"></vaadin-radio-button>
-            </vaadin-radio-group>
-            <vaadin-button>tabindex 0</vaadin-button>
+            <vaadin24-radio-group>
+              <vaadin24-radio-button id="radioButton1" label="Button 1"></vaadin24-radio-button>
+              <vaadin24-radio-button id="radioButton2" label="Button 2"></vaadin24-radio-button>
+              <vaadin24-radio-button id="radioButton3" label="Button 3"></vaadin24-radio-button>
+            </vaadin24-radio-group>
+            <vaadin24-button>tabindex 0</vaadin24-button>
           </template>
-        </vaadin-overlay>
-        <vaadin-overlay id="shadowOverlay" focus-trap>
+        </vaadin24-overlay>
+        <vaadin24-overlay id="shadowOverlay" focus-trap>
           <template>
             <container-with-shadow></container-with-shadow>
             <input type="text" id="text" />
           </template>
-        </vaadin-overlay>
-        <vaadin-overlay id="emptyOverlay" focus-trap>
+        </vaadin24-overlay>
+        <vaadin24-overlay id="emptyOverlay" focus-trap>
           <template></template>
-        </vaadin-overlay>
+        </vaadin24-overlay>
       `;
     }
   },
 );
 
-customElements.define(
+internalCustomElements.define(
   'nested-overlay-wrapper',
   class extends PolymerElement {
     static get template() {
       return html`
-        <vaadin-overlay id="outer" focus-trap>
+        <vaadin24-overlay id="outer" focus-trap>
           <template>
             <button>Button</button>
-            <vaadin-overlay id="nested">
+            <vaadin24-overlay id="nested">
               <template>Inner content</template>
-            </vaadin-overlay>
+            </vaadin24-overlay>
           </template>
-        </vaadin-overlay>
+        </vaadin24-overlay>
       `;
     }
   },
@@ -119,12 +120,12 @@
       expect(focusableElements[1]).to.eql(overlay.content.querySelector('select'));
       expect(focusableElements[2]).to.eql(overlay.$.overlay);
       expect(focusableElements[3]).to.eql(overlay.content.querySelector('button'));
-      expect(focusableElements[4]).to.eql(overlay.content.querySelector('vaadin-text-field').focusElement);
+      expect(focusableElements[4]).to.eql(overlay.content.querySelector('vaadin24-text-field').focusElement);
       expect(focusableElements[5]).to.eql(overlay.content.querySelector('#text'));
       expect(focusableElements[6]).to.eql(overlay.content.querySelector('#radioButton1').focusElement);
       expect(focusableElements[7]).to.eql(overlay.content.querySelector('#radioButton2').focusElement);
       expect(focusableElements[8]).to.eql(overlay.content.querySelector('#radioButton3').focusElement);
-      expect(focusableElements[9]).to.eql(overlay.content.querySelector('vaadin-button'));
+      expect(focusableElements[9]).to.eql(overlay.content.querySelector('vaadin24-button'));
     });
 
     it('should focus focusable elements inside the content when focusTrap = true', async () => {
@@ -179,7 +180,7 @@
       overlay.opened = true;
       await oneEvent(overlay, 'vaadin-overlay-open');
 
-      const button = overlay.content.querySelector('vaadin-button');
+      const button = overlay.content.querySelector('vaadin24-button');
       button.focus();
       button.blur();
 
@@ -283,23 +284,23 @@
     beforeEach(async () => {
       parent = fixtureSync(`
         <div>
-          <vaadin-overlay focus-trap>
+          <vaadin24-overlay focus-trap>
             <template>
               overlay-content
               <button>tabindex 0</button>
               <button tabindex="-1">tabindex -1</button>
               <select tabindex="2"><option>tabindex 2</option></select>
-              <vaadin-text-field></vaadin-text-field>
+              <vaadin24-text-field></vaadin24-text-field>
               <textarea tabindex="1">tabindex 1</textarea>
               <input type="text" id="text" value="tabindex 0">
-              <vaadin-radio-group>
-                <vaadin-radio-button id="radioButton1" label="Button 1"></vaadin-radio-button>
-                <vaadin-radio-button id="radioButton2" label="Button 2"></vaadin-radio-button>
-                <vaadin-radio-button id="radioButton3" label="Button 3"></vaadin-radio-button>
-              </vaadin-radio-group>
-              <vaadin-button>tabindex 0</vaadin-button>
+              <vaadin24-radio-group>
+                <vaadin24-radio-button id="radioButton1" label="Button 1"></vaadin24-radio-button>
+                <vaadin24-radio-button id="radioButton2" label="Button 2"></vaadin24-radio-button>
+                <vaadin24-radio-button id="radioButton3" label="Button 3"></vaadin24-radio-button>
+              </vaadin24-radio-group>
+              <vaadin24-button>tabindex 0</vaadin24-button>
             </template>
-          </vaadin-overlay>
+          </vaadin24-overlay>
         </div>
       `);
       await nextRender();
@@ -329,12 +330,12 @@
       expect(focusableElements[1]).to.eql(overlay.content.querySelector('select'));
       expect(focusableElements[2]).to.eql(overlay.$.overlay);
       expect(focusableElements[3]).to.eql(overlay.content.querySelector('button'));
-      expect(focusableElements[4]).to.eql(overlay.content.querySelector('vaadin-text-field').focusElement);
+      expect(focusableElements[4]).to.eql(overlay.content.querySelector('vaadin24-text-field').focusElement);
       expect(focusableElements[5]).to.eql(overlay.content.querySelector('#text'));
       expect(focusableElements[6]).to.eql(overlay.content.querySelector('#radioButton1').focusElement);
       expect(focusableElements[7]).to.eql(overlay.content.querySelector('#radioButton2').focusElement);
       expect(focusableElements[8]).to.eql(overlay.content.querySelector('#radioButton3').focusElement);
-      expect(focusableElements[9]).to.eql(overlay.content.querySelector('vaadin-button'));
+      expect(focusableElements[9]).to.eql(overlay.content.querySelector('vaadin24-button'));
     });
 
     it('should focus focusable elements inside the content when focusTrap = true', async () => {
@@ -389,7 +390,7 @@
       await oneEvent(overlay, 'vaadin-overlay-open');
       focusableElements = getFocusableElements(overlay.$.overlay);
 
-      const button = overlay.content.querySelector('vaadin-button');
+      const button = overlay.content.querySelector('vaadin24-button');
       button.focus();
       button.blur();
 
@@ -399,13 +400,13 @@
     describe('shadow content', () => {
       beforeEach(() => {
         overlay = fixtureSync(`
-          <vaadin-overlay focus-trap>
+          <vaadin24-overlay focus-trap>
             <template>
               <container-with-shadow></container-with-shadow>
               <svg></svg>
               <input type="text" id="text">
             </template>
-          </vaadin-overlay>
+          </vaadin24-overlay>
         `);
       });
 
@@ -483,10 +484,10 @@
       beforeEach(() => {
         parent = fixtureSync(`
           <div>
-            <vaadin-overlay focus-trap>
+            <vaadin24-overlay focus-trap>
               <template>
               </template>
-            </vaadin-overlay>
+            </vaadin24-overlay>
           </div>
         `);
         overlay = parent.firstElementChild;
