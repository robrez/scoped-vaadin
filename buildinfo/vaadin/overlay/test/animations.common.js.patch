Index: test/animations.common.js
===================================================================
--- test/animations.common.js
+++ test/animations.common.js
@@ -1,16 +1,17 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@vaadin/chai-plugins';
 import { escKeyDown, fixtureSync, nextFrame, nextRender } from '@vaadin/testing-helpers';
 import { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
 import { createOverlay } from './helpers.js';
 
-customElements.define(
+internalCustomElements.define(
   'two-overlays',
   class extends PolymerElement {
     static get template() {
       return html`
-        <vaadin-overlay opened="{{showOverlay1}}" renderer="[[renderer1]]"></vaadin-overlay>
-        <vaadin-overlay opened="{{showOverlay2}}" renderer="[[renderer2]]"></vaadin-overlay>
+        <vaadin24-overlay opened="{{showOverlay1}}" renderer="[[renderer1]]"></vaadin24-overlay>
+        <vaadin24-overlay opened="{{showOverlay2}}" renderer="[[renderer2]]"></vaadin24-overlay>
       `;
     }
 
@@ -57,7 +58,7 @@
   },
 );
 
-customElements.define(
+internalCustomElements.define(
   'animated-div',
   class extends PolymerElement {
     static get template() {
@@ -189,7 +190,7 @@
 
     beforeEach((done) => {
       wrapper = fixtureSync('<two-overlays><two-overlays>');
-      overlays = Array.from(wrapper.shadowRoot.querySelectorAll('vaadin-overlay'));
+      overlays = Array.from(wrapper.shadowRoot.querySelectorAll('vaadin24-overlay'));
       if (withAnimation) {
         overlays.forEach((overlay) => overlay.setAttribute('animate', ''));
       }
@@ -218,7 +219,7 @@
     beforeEach(async () => {
       wrapper = fixtureSync('<two-overlays><two-overlays>');
       await nextRender();
-      overlays = Array.from(wrapper.shadowRoot.querySelectorAll('vaadin-overlay'));
+      overlays = Array.from(wrapper.shadowRoot.querySelectorAll('vaadin24-overlay'));
       if (withAnimation) {
         overlays.forEach((overlay) => overlay.setAttribute('animate', ''));
       }
@@ -247,9 +248,9 @@
     beforeEach(async () => {
       wrapper = fixtureSync('<two-overlays><two-overlays>');
       await nextRender();
-      const third = document.createElement('vaadin-overlay');
+      const third = document.createElement('vaadin24-overlay');
       wrapper.shadowRoot.appendChild(third);
-      overlays = Array.from(wrapper.shadowRoot.querySelectorAll('vaadin-overlay'));
+      overlays = Array.from(wrapper.shadowRoot.querySelectorAll('vaadin24-overlay'));
 
       if (withAnimation) {
         overlays.forEach((overlay) => overlay.setAttribute('animate', ''));
@@ -283,12 +284,12 @@
     beforeEach(async () => {
       wrapper = fixtureSync(`
         <div>
-          <vaadin-overlay></vaadin-overlay>
-          <vaadin-overlay></vaadin-overlay>
+          <vaadin24-overlay></vaadin24-overlay>
+          <vaadin24-overlay></vaadin24-overlay>
         </div>
       `);
       await nextRender();
-      overlays = Array.from(wrapper.querySelectorAll('vaadin-overlay'));
+      overlays = Array.from(wrapper.querySelectorAll('vaadin24-overlay'));
       overlays[0].renderer = (root) => {
         if (!root.firstChild) {
           const div = document.createElement('div');
