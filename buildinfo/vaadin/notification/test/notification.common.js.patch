Index: test/notification.common.js
===================================================================
--- test/notification.common.js
+++ test/notification.common.js
@@ -2,12 +2,12 @@
 import { aTimeout, fixtureSync, isIOS, listenOnce, nextFrame } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
 
-describe('vaadin-notification', () => {
+describe('vaadin24-notification', () => {
   let notification;
 
   beforeEach(async () => {
     notification = fixtureSync(`
-      <vaadin-notification duration="20"></vaadin-notification>
+      <vaadin24-notification duration="20"></vaadin24-notification>
     `);
     await nextFrame();
 
@@ -74,27 +74,27 @@
     await closedPromise;
   });
 
-  describe('vaadin-notification-container', () => {
+  describe('vaadin24-notification-container', () => {
     it('should be in the body when notification opens', () => {
-      expect(document.body.querySelectorAll('vaadin-notification-container').length).to.be.equal(1);
+      expect(document.body.querySelectorAll('vaadin24-notification-container').length).to.be.equal(1);
     });
 
     it('should not be in the body when notifications close', () => {
       notification.close();
       notification._removeNotificationCard();
-      expect(document.body.querySelectorAll('vaadin-notification-container').length).to.be.equal(0);
+      expect(document.body.querySelectorAll('vaadin24-notification-container').length).to.be.equal(0);
     });
 
     it('should be in the body when notification reopens', () => {
       notification.close();
       notification._removeNotificationCard();
       notification.open();
-      expect(document.body.querySelectorAll('vaadin-notification-container').length).to.be.equal(1);
+      expect(document.body.querySelectorAll('vaadin24-notification-container').length).to.be.equal(1);
     });
 
     it('should be visible after opening', () => {
       const isVisible = (elem) => !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
-      expect(isVisible(document.body.querySelector('vaadin-notification-container'))).to.be.true;
+      expect(isVisible(document.body.querySelector('vaadin24-notification-container'))).to.be.true;
     });
 
     it('should cancel vaadin-overlay-close events when the source event occurred within the container', (done) => {
@@ -129,7 +129,7 @@
       let container;
 
       beforeEach(() => {
-        container = document.body.querySelector('vaadin-notification-container');
+        container = document.body.querySelector('vaadin24-notification-container');
       });
 
       it('should set value to bottom when landscape and clientHeight > innerHeight', () => {
