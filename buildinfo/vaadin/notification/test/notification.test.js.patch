Index: test/notification.test.js
===================================================================
--- test/notification.test.js
+++ test/notification.test.js
@@ -1,19 +1,19 @@
 import { expect } from '@esm-bundle/chai';
 import { aTimeout, fixtureSync, listenOnce } from '@vaadin/testing-helpers';
 import sinon from 'sinon';
-import '@vaadin/polymer-legacy-adapter/template-renderer.js';
+import '@scoped-vaadin/polymer-legacy-adapter/template-renderer.js';
 import '../vaadin-notification.js';
 
-describe('vaadin-notification', () => {
+describe('vaadin23-notification', () => {
   let notification;
 
   beforeEach(() => {
     notification = fixtureSync(`
-      <vaadin-notification duration="20">
+      <vaadin23-notification duration="20">
         <template>
           Your work has been <strong>saved</strong>
         </template>
-      </vaadin-notification>
+      </vaadin23-notification>
     `);
 
     // Force sync card attaching and removal instead of waiting for the animation
@@ -45,27 +45,27 @@
     expect(notification.opened).to.be.false;
   });
 
-  describe('vaadin-notification-container', () => {
+  describe('vaadin23-notification-container', () => {
     it('should be in the body when notification opens', () => {
-      expect(document.body.querySelectorAll('vaadin-notification-container').length).to.be.equal(1);
+      expect(document.body.querySelectorAll('vaadin23-notification-container').length).to.be.equal(1);
     });
 
     it('should not be in the body when notifications close', () => {
       notification.close();
       notification._removeNotificationCard();
-      expect(document.body.querySelectorAll('vaadin-notification-container').length).to.be.equal(0);
+      expect(document.body.querySelectorAll('vaadin23-notification-container').length).to.be.equal(0);
     });
 
     it('should not be in the body when notification reopens', () => {
       notification.close();
       notification._removeNotificationCard();
       notification.open();
-      expect(document.body.querySelectorAll('vaadin-notification-container').length).to.be.equal(1);
+      expect(document.body.querySelectorAll('vaadin23-notification-container').length).to.be.equal(1);
     });
 
     it('should be visible after opening', () => {
       const isVisible = (elem) => !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
-      expect(isVisible(document.body.querySelector('vaadin-notification-container'))).to.be.true;
+      expect(isVisible(document.body.querySelector('vaadin23-notification-container'))).to.be.true;
     });
 
     it('should cancel vaadin-overlay-close events when the source event occurred within the container', (done) => {
@@ -101,7 +101,7 @@
       let container;
 
       beforeEach(() => {
-        container = document.body.querySelector('vaadin-notification-container');
+        container = document.body.querySelector('vaadin23-notification-container');
       });
 
       it('should set value to bottom when landscape and clientHeight > innerHeight', () => {
