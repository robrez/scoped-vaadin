Index: test/template.test.js
===================================================================
--- test/template.test.js
+++ test/template.test.js
@@ -1,18 +1,19 @@
+import { internalCustomElements } from '@scoped-vaadin/internal-custom-elements-registry';
 import { expect } from '@esm-bundle/chai';
 import { fixtureSync } from '@vaadin/testing-helpers';
-import '@vaadin/polymer-legacy-adapter/template-renderer.js';
+import '@scoped-vaadin/polymer-legacy-adapter/template-renderer.js';
 import '../vaadin-notification.js';
 import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';
 
 class XNotification extends PolymerElement {
   static get template() {
     return html`
-      <vaadin-notification id="notification" duration="20" opened>
+      <vaadin24-notification id="notification" duration="20" opened>
         <template>
           <span>[[message]]</span>
           <input value="{{text::input}}" />
         </template>
-      </vaadin-notification>
+      </vaadin24-notification>
     `;
   }
 
@@ -24,14 +25,14 @@
   }
 }
 
-customElements.define('x-notification', XNotification);
+internalCustomElements.define('x-notification', XNotification);
 
 describe('template', () => {
   it('should render the template', () => {
     const notification = fixtureSync(`
-      <vaadin-notification opened>
+      <vaadin24-notification opened>
         <template>foo</template>
-      </vaadin-notification>
+      </vaadin24-notification>
     `);
 
     expect(notification._card.textContent.trim()).to.equal('foo');
